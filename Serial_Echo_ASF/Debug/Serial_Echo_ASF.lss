
Serial_Echo_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d18  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00001d18  00001d18  00009d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  00001d20  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000c0  20000438  00002158  00010438  2**2
                  ALLOC
  4 .stack        00002000  200004f8  00002218  00010438  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  7 .debug_info   000164de  00000000  00000000  000104d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bd5  00000000  00000000  000269af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003f22  00000000  00000000  00029584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000004e0  00000000  00000000  0002d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000428  00000000  00000000  0002d986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00010dd6  00000000  00000000  0002ddae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a707  00000000  00000000  0003eb84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058fd1  00000000  00000000  0004928b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000b48  00000000  00000000  000a225c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200024f8 	.word	0x200024f8
       4:	00000fe5 	.word	0x00000fe5
       8:	00000fe1 	.word	0x00000fe1
       c:	00000fb9 	.word	0x00000fb9
	...
      2c:	00000fe1 	.word	0x00000fe1
	...
      38:	00000fe1 	.word	0x00000fe1
      3c:	00001225 	.word	0x00001225
      40:	00000fe1 	.word	0x00000fe1
      44:	00000fe1 	.word	0x00000fe1
      48:	00000fe1 	.word	0x00000fe1
      4c:	00000fe1 	.word	0x00000fe1
      50:	00000fe1 	.word	0x00000fe1
      54:	00000fe1 	.word	0x00000fe1
      58:	00000fe1 	.word	0x00000fe1
      5c:	0000098d 	.word	0x0000098d
      60:	0000099d 	.word	0x0000099d
      64:	000009ad 	.word	0x000009ad
      68:	000009bd 	.word	0x000009bd
      6c:	000009cd 	.word	0x000009cd
      70:	000009dd 	.word	0x000009dd
      74:	0000047d 	.word	0x0000047d
      78:	0000048d 	.word	0x0000048d
      7c:	0000049d 	.word	0x0000049d
      80:	000004ad 	.word	0x000004ad
      84:	000004bd 	.word	0x000004bd
      88:	000004cd 	.word	0x000004cd
      8c:	000004dd 	.word	0x000004dd
      90:	000004ed 	.word	0x000004ed
      94:	00000fe1 	.word	0x00000fe1
      98:	00000fe1 	.word	0x00000fe1
      9c:	00000fe1 	.word	0x00000fe1
      a0:	00000fe1 	.word	0x00000fe1

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a1b      	subs	r3, r3, r0
      ae:	2b06      	cmp	r3, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2b00      	cmp	r3, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4798      	blx	r3
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00001d20 	.word	0x00001d20
      c4:	00001d20 	.word	0x00001d20
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a1b      	subs	r3, r3, r0
      d4:	109b      	asrs	r3, r3, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d3      	adds	r3, r2, r3
      da:	1059      	asrs	r1, r3, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4a04      	ldr	r2, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2a00      	cmp	r2, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4790      	blx	r2
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00001d20 	.word	0x00001d20
      f0:	00001d20 	.word	0x00001d20
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2b00      	cmp	r3, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	20000438 	.word	0x20000438
     11c:	00000000 	.word	0x00000000
     120:	00001d20 	.word	0x00001d20

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6803      	ldr	r3, [r0, #0]
     138:	2b00      	cmp	r3, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2b00      	cmp	r3, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4798      	blx	r3
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00001d20 	.word	0x00001d20
     154:	2000043c 	.word	0x2000043c
     158:	00001d20 	.word	0x00001d20
     15c:	00000000 	.word	0x00000000

00000160 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     160:	b538      	push	{r3, r4, r5, lr}
     162:	1c15      	adds	r5, r2, #0
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     164:	084c      	lsrs	r4, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     166:	2340      	movs	r3, #64	; 0x40
{
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     168:	4284      	cmp	r4, r0
     16a:	d30b      	bcc.n	184 <_sercom_get_sync_baud_val+0x24>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
     16c:	0043      	lsls	r3, r0, #1
     16e:	1c08      	adds	r0, r1, #0
     170:	1c19      	adds	r1, r3, #0
     172:	4b05      	ldr	r3, [pc, #20]	; (188 <_sercom_get_sync_baud_val+0x28>)
     174:	4798      	blx	r3
     176:	3801      	subs	r0, #1
     178:	b280      	uxth	r0, r0

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     17a:	2340      	movs	r3, #64	; 0x40
	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     17c:	28ff      	cmp	r0, #255	; 0xff
     17e:	d801      	bhi.n	184 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     180:	8028      	strh	r0, [r5, #0]
		return STATUS_OK;
     182:	2300      	movs	r3, #0
	}
}
     184:	1c18      	adds	r0, r3, #0
     186:	bd38      	pop	{r3, r4, r5, pc}
     188:	00001235 	.word	0x00001235
     18c:	00000000 	.word	0x00000000

00000190 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     192:	1c07      	adds	r7, r0, #0
     194:	1c0d      	adds	r5, r1, #0
     196:	1c16      	adds	r6, r2, #0
     198:	aa06      	add	r2, sp, #24
     19a:	7810      	ldrb	r0, [r2, #0]
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     19c:	1c3a      	adds	r2, r7, #0
     19e:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1a0:	2440      	movs	r4, #64	; 0x40
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     1a2:	428a      	cmp	r2, r1
     1a4:	d240      	bcs.n	228 <_sercom_get_async_baud_val+0x98>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     1a6:	2b00      	cmp	r3, #0
     1a8:	d113      	bne.n	1d2 <_sercom_get_async_baud_val+0x42>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
     1aa:	2100      	movs	r1, #0
     1ac:	1c3a      	adds	r2, r7, #0
     1ae:	4c22      	ldr	r4, [pc, #136]	; (238 <_sercom_get_async_baud_val+0xa8>)
     1b0:	47a0      	blx	r4
     1b2:	1c01      	adds	r1, r0, #0
     1b4:	2000      	movs	r0, #0
     1b6:	1c2a      	adds	r2, r5, #0
     1b8:	2300      	movs	r3, #0
     1ba:	4c20      	ldr	r4, [pc, #128]	; (23c <_sercom_get_async_baud_val+0xac>)
     1bc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1be:	4d1d      	ldr	r5, [pc, #116]	; (234 <_sercom_get_async_baud_val+0xa4>)
     1c0:	4c1b      	ldr	r4, [pc, #108]	; (230 <_sercom_get_async_baud_val+0xa0>)
     1c2:	1c22      	adds	r2, r4, #0
     1c4:	1c2b      	adds	r3, r5, #0
     1c6:	1a12      	subs	r2, r2, r0
     1c8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     1ca:	0c12      	lsrs	r2, r2, #16
     1cc:	041b      	lsls	r3, r3, #16
     1ce:	431a      	orrs	r2, r3
     1d0:	e026      	b.n	220 <_sercom_get_async_baud_val+0x90>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     1d2:	2200      	movs	r2, #0
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     1d4:	2b01      	cmp	r3, #1
     1d6:	d123      	bne.n	220 <_sercom_get_async_baud_val+0x90>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
     1d8:	0f4c      	lsrs	r4, r1, #29
     1da:	00cd      	lsls	r5, r1, #3
     1dc:	2100      	movs	r1, #0
     1de:	1c3a      	adds	r2, r7, #0
     1e0:	2300      	movs	r3, #0
     1e2:	4f15      	ldr	r7, [pc, #84]	; (238 <_sercom_get_async_baud_val+0xa8>)
     1e4:	47b8      	blx	r7
     1e6:	1c02      	adds	r2, r0, #0
     1e8:	1c0b      	adds	r3, r1, #0
     1ea:	1c28      	adds	r0, r5, #0
     1ec:	1c21      	adds	r1, r4, #0
     1ee:	4c13      	ldr	r4, [pc, #76]	; (23c <_sercom_get_async_baud_val+0xac>)
     1f0:	47a0      	blx	r4
			baud_int = baud_int / BAUD_FP_MAX;
     1f2:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     1f4:	4b12      	ldr	r3, [pc, #72]	; (240 <_sercom_get_async_baud_val+0xb0>)
     1f6:	429a      	cmp	r2, r3
     1f8:	d90f      	bls.n	21a <_sercom_get_async_baud_val+0x8a>
     1fa:	3801      	subs	r0, #1
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     1fc:	2301      	movs	r3, #1
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     1fe:	4910      	ldr	r1, [pc, #64]	; (240 <_sercom_get_async_baud_val+0xb0>)
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
     200:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     202:	428a      	cmp	r2, r1
     204:	d905      	bls.n	212 <_sercom_get_async_baud_val+0x82>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     206:	3301      	adds	r3, #1
     208:	b2db      	uxtb	r3, r3
     20a:	3801      	subs	r0, #1
     20c:	2b08      	cmp	r3, #8
     20e:	d1f7      	bne.n	200 <_sercom_get_async_baud_val+0x70>
     210:	e009      	b.n	226 <_sercom_get_async_baud_val+0x96>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     212:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     214:	2b08      	cmp	r3, #8
     216:	d101      	bne.n	21c <_sercom_get_async_baud_val+0x8c>
     218:	e006      	b.n	228 <_sercom_get_async_baud_val+0x98>
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     21a:	2300      	movs	r3, #0
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     21c:	035b      	lsls	r3, r3, #13
     21e:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     220:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     222:	2400      	movs	r4, #0
     224:	e000      	b.n	228 <_sercom_get_async_baud_val+0x98>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     226:	2440      	movs	r4, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     228:	1c20      	adds	r0, r4, #0
     22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     22c:	46c0      	nop			; (mov r8, r8)
     22e:	46c0      	nop			; (mov r8, r8)
     230:	00000000 	.word	0x00000000
     234:	00000001 	.word	0x00000001
     238:	00001315 	.word	0x00001315
     23c:	000012d5 	.word	0x000012d5
     240:	00001fff 	.word	0x00001fff
     244:	46c0      	nop			; (mov r8, r8)
     246:	46c0      	nop			; (mov r8, r8)

00000248 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     248:	b510      	push	{r4, lr}
     24a:	b082      	sub	sp, #8
     24c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     24e:	4b0f      	ldr	r3, [pc, #60]	; (28c <sercom_set_gclk_generator+0x44>)
     250:	781b      	ldrb	r3, [r3, #0]
     252:	2b00      	cmp	r3, #0
     254:	d001      	beq.n	25a <sercom_set_gclk_generator+0x12>
     256:	2900      	cmp	r1, #0
     258:	d00d      	beq.n	276 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     25a:	a901      	add	r1, sp, #4
     25c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     25e:	200c      	movs	r0, #12
     260:	4b0b      	ldr	r3, [pc, #44]	; (290 <sercom_set_gclk_generator+0x48>)
     262:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     264:	200c      	movs	r0, #12
     266:	4b0b      	ldr	r3, [pc, #44]	; (294 <sercom_set_gclk_generator+0x4c>)
     268:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     26a:	4b08      	ldr	r3, [pc, #32]	; (28c <sercom_set_gclk_generator+0x44>)
     26c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     26e:	2201      	movs	r2, #1
     270:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     272:	2000      	movs	r0, #0
     274:	e007      	b.n	286 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     276:	4b05      	ldr	r3, [pc, #20]	; (28c <sercom_set_gclk_generator+0x44>)
     278:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     27a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     27c:	1b14      	subs	r4, r2, r4
     27e:	1e62      	subs	r2, r4, #1
     280:	4194      	sbcs	r4, r2
     282:	4264      	negs	r4, r4
     284:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     286:	b002      	add	sp, #8
     288:	bd10      	pop	{r4, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	20000454 	.word	0x20000454
     290:	00000ead 	.word	0x00000ead
     294:	00000e1d 	.word	0x00000e1d

00000298 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     298:	4b44      	ldr	r3, [pc, #272]	; (3ac <_sercom_get_default_pad+0x114>)
     29a:	4298      	cmp	r0, r3
     29c:	d033      	beq.n	306 <_sercom_get_default_pad+0x6e>
     29e:	d806      	bhi.n	2ae <_sercom_get_default_pad+0x16>
     2a0:	4b43      	ldr	r3, [pc, #268]	; (3b0 <_sercom_get_default_pad+0x118>)
     2a2:	4298      	cmp	r0, r3
     2a4:	d00d      	beq.n	2c2 <_sercom_get_default_pad+0x2a>
     2a6:	4b43      	ldr	r3, [pc, #268]	; (3b4 <_sercom_get_default_pad+0x11c>)
     2a8:	4298      	cmp	r0, r3
     2aa:	d01b      	beq.n	2e4 <_sercom_get_default_pad+0x4c>
     2ac:	e06f      	b.n	38e <_sercom_get_default_pad+0xf6>
     2ae:	4b42      	ldr	r3, [pc, #264]	; (3b8 <_sercom_get_default_pad+0x120>)
     2b0:	4298      	cmp	r0, r3
     2b2:	d04a      	beq.n	34a <_sercom_get_default_pad+0xb2>
     2b4:	4b41      	ldr	r3, [pc, #260]	; (3bc <_sercom_get_default_pad+0x124>)
     2b6:	4298      	cmp	r0, r3
     2b8:	d058      	beq.n	36c <_sercom_get_default_pad+0xd4>
     2ba:	4b41      	ldr	r3, [pc, #260]	; (3c0 <_sercom_get_default_pad+0x128>)
     2bc:	4298      	cmp	r0, r3
     2be:	d166      	bne.n	38e <_sercom_get_default_pad+0xf6>
     2c0:	e032      	b.n	328 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2c2:	2901      	cmp	r1, #1
     2c4:	d065      	beq.n	392 <_sercom_get_default_pad+0xfa>
     2c6:	2900      	cmp	r1, #0
     2c8:	d004      	beq.n	2d4 <_sercom_get_default_pad+0x3c>
     2ca:	2902      	cmp	r1, #2
     2cc:	d006      	beq.n	2dc <_sercom_get_default_pad+0x44>
     2ce:	2903      	cmp	r1, #3
     2d0:	d006      	beq.n	2e0 <_sercom_get_default_pad+0x48>
     2d2:	e001      	b.n	2d8 <_sercom_get_default_pad+0x40>
     2d4:	483b      	ldr	r0, [pc, #236]	; (3c4 <_sercom_get_default_pad+0x12c>)
     2d6:	e067      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     2d8:	2000      	movs	r0, #0
     2da:	e065      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2dc:	483a      	ldr	r0, [pc, #232]	; (3c8 <_sercom_get_default_pad+0x130>)
     2de:	e063      	b.n	3a8 <_sercom_get_default_pad+0x110>
     2e0:	483a      	ldr	r0, [pc, #232]	; (3cc <_sercom_get_default_pad+0x134>)
     2e2:	e061      	b.n	3a8 <_sercom_get_default_pad+0x110>
     2e4:	2901      	cmp	r1, #1
     2e6:	d056      	beq.n	396 <_sercom_get_default_pad+0xfe>
     2e8:	2900      	cmp	r1, #0
     2ea:	d004      	beq.n	2f6 <_sercom_get_default_pad+0x5e>
     2ec:	2902      	cmp	r1, #2
     2ee:	d006      	beq.n	2fe <_sercom_get_default_pad+0x66>
     2f0:	2903      	cmp	r1, #3
     2f2:	d006      	beq.n	302 <_sercom_get_default_pad+0x6a>
     2f4:	e001      	b.n	2fa <_sercom_get_default_pad+0x62>
     2f6:	2003      	movs	r0, #3
     2f8:	e056      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     2fa:	2000      	movs	r0, #0
     2fc:	e054      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2fe:	4834      	ldr	r0, [pc, #208]	; (3d0 <_sercom_get_default_pad+0x138>)
     300:	e052      	b.n	3a8 <_sercom_get_default_pad+0x110>
     302:	4834      	ldr	r0, [pc, #208]	; (3d4 <_sercom_get_default_pad+0x13c>)
     304:	e050      	b.n	3a8 <_sercom_get_default_pad+0x110>
     306:	2901      	cmp	r1, #1
     308:	d047      	beq.n	39a <_sercom_get_default_pad+0x102>
     30a:	2900      	cmp	r1, #0
     30c:	d004      	beq.n	318 <_sercom_get_default_pad+0x80>
     30e:	2902      	cmp	r1, #2
     310:	d006      	beq.n	320 <_sercom_get_default_pad+0x88>
     312:	2903      	cmp	r1, #3
     314:	d006      	beq.n	324 <_sercom_get_default_pad+0x8c>
     316:	e001      	b.n	31c <_sercom_get_default_pad+0x84>
     318:	482f      	ldr	r0, [pc, #188]	; (3d8 <_sercom_get_default_pad+0x140>)
     31a:	e045      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     31c:	2000      	movs	r0, #0
     31e:	e043      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     320:	482e      	ldr	r0, [pc, #184]	; (3dc <_sercom_get_default_pad+0x144>)
     322:	e041      	b.n	3a8 <_sercom_get_default_pad+0x110>
     324:	482e      	ldr	r0, [pc, #184]	; (3e0 <_sercom_get_default_pad+0x148>)
     326:	e03f      	b.n	3a8 <_sercom_get_default_pad+0x110>
     328:	2901      	cmp	r1, #1
     32a:	d038      	beq.n	39e <_sercom_get_default_pad+0x106>
     32c:	2900      	cmp	r1, #0
     32e:	d004      	beq.n	33a <_sercom_get_default_pad+0xa2>
     330:	2902      	cmp	r1, #2
     332:	d006      	beq.n	342 <_sercom_get_default_pad+0xaa>
     334:	2903      	cmp	r1, #3
     336:	d006      	beq.n	346 <_sercom_get_default_pad+0xae>
     338:	e001      	b.n	33e <_sercom_get_default_pad+0xa6>
     33a:	482a      	ldr	r0, [pc, #168]	; (3e4 <_sercom_get_default_pad+0x14c>)
     33c:	e034      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     33e:	2000      	movs	r0, #0
     340:	e032      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     342:	4829      	ldr	r0, [pc, #164]	; (3e8 <_sercom_get_default_pad+0x150>)
     344:	e030      	b.n	3a8 <_sercom_get_default_pad+0x110>
     346:	4829      	ldr	r0, [pc, #164]	; (3ec <_sercom_get_default_pad+0x154>)
     348:	e02e      	b.n	3a8 <_sercom_get_default_pad+0x110>
     34a:	2901      	cmp	r1, #1
     34c:	d029      	beq.n	3a2 <_sercom_get_default_pad+0x10a>
     34e:	2900      	cmp	r1, #0
     350:	d004      	beq.n	35c <_sercom_get_default_pad+0xc4>
     352:	2902      	cmp	r1, #2
     354:	d006      	beq.n	364 <_sercom_get_default_pad+0xcc>
     356:	2903      	cmp	r1, #3
     358:	d006      	beq.n	368 <_sercom_get_default_pad+0xd0>
     35a:	e001      	b.n	360 <_sercom_get_default_pad+0xc8>
     35c:	4824      	ldr	r0, [pc, #144]	; (3f0 <_sercom_get_default_pad+0x158>)
     35e:	e023      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     360:	2000      	movs	r0, #0
     362:	e021      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     364:	4823      	ldr	r0, [pc, #140]	; (3f4 <_sercom_get_default_pad+0x15c>)
     366:	e01f      	b.n	3a8 <_sercom_get_default_pad+0x110>
     368:	4823      	ldr	r0, [pc, #140]	; (3f8 <_sercom_get_default_pad+0x160>)
     36a:	e01d      	b.n	3a8 <_sercom_get_default_pad+0x110>
     36c:	2901      	cmp	r1, #1
     36e:	d01a      	beq.n	3a6 <_sercom_get_default_pad+0x10e>
     370:	2900      	cmp	r1, #0
     372:	d004      	beq.n	37e <_sercom_get_default_pad+0xe6>
     374:	2902      	cmp	r1, #2
     376:	d006      	beq.n	386 <_sercom_get_default_pad+0xee>
     378:	2903      	cmp	r1, #3
     37a:	d006      	beq.n	38a <_sercom_get_default_pad+0xf2>
     37c:	e001      	b.n	382 <_sercom_get_default_pad+0xea>
     37e:	481f      	ldr	r0, [pc, #124]	; (3fc <_sercom_get_default_pad+0x164>)
     380:	e012      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     382:	2000      	movs	r0, #0
     384:	e010      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     386:	481e      	ldr	r0, [pc, #120]	; (400 <_sercom_get_default_pad+0x168>)
     388:	e00e      	b.n	3a8 <_sercom_get_default_pad+0x110>
     38a:	481e      	ldr	r0, [pc, #120]	; (404 <_sercom_get_default_pad+0x16c>)
     38c:	e00c      	b.n	3a8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     38e:	2000      	movs	r0, #0
     390:	e00a      	b.n	3a8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     392:	481d      	ldr	r0, [pc, #116]	; (408 <_sercom_get_default_pad+0x170>)
     394:	e008      	b.n	3a8 <_sercom_get_default_pad+0x110>
     396:	481d      	ldr	r0, [pc, #116]	; (40c <_sercom_get_default_pad+0x174>)
     398:	e006      	b.n	3a8 <_sercom_get_default_pad+0x110>
     39a:	481d      	ldr	r0, [pc, #116]	; (410 <_sercom_get_default_pad+0x178>)
     39c:	e004      	b.n	3a8 <_sercom_get_default_pad+0x110>
     39e:	481d      	ldr	r0, [pc, #116]	; (414 <_sercom_get_default_pad+0x17c>)
     3a0:	e002      	b.n	3a8 <_sercom_get_default_pad+0x110>
     3a2:	481d      	ldr	r0, [pc, #116]	; (418 <_sercom_get_default_pad+0x180>)
     3a4:	e000      	b.n	3a8 <_sercom_get_default_pad+0x110>
     3a6:	481d      	ldr	r0, [pc, #116]	; (41c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     3a8:	4770      	bx	lr
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	42001000 	.word	0x42001000
     3b0:	42000800 	.word	0x42000800
     3b4:	42000c00 	.word	0x42000c00
     3b8:	42001800 	.word	0x42001800
     3bc:	42001c00 	.word	0x42001c00
     3c0:	42001400 	.word	0x42001400
     3c4:	00040003 	.word	0x00040003
     3c8:	00060003 	.word	0x00060003
     3cc:	00070003 	.word	0x00070003
     3d0:	001e0003 	.word	0x001e0003
     3d4:	001f0003 	.word	0x001f0003
     3d8:	00080003 	.word	0x00080003
     3dc:	000a0003 	.word	0x000a0003
     3e0:	000b0003 	.word	0x000b0003
     3e4:	00100003 	.word	0x00100003
     3e8:	00120003 	.word	0x00120003
     3ec:	00130003 	.word	0x00130003
     3f0:	000c0003 	.word	0x000c0003
     3f4:	000e0003 	.word	0x000e0003
     3f8:	000f0003 	.word	0x000f0003
     3fc:	00160003 	.word	0x00160003
     400:	00180003 	.word	0x00180003
     404:	00190003 	.word	0x00190003
     408:	00050003 	.word	0x00050003
     40c:	00010003 	.word	0x00010003
     410:	00090003 	.word	0x00090003
     414:	00110003 	.word	0x00110003
     418:	000d0003 	.word	0x000d0003
     41c:	00170003 	.word	0x00170003

00000420 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     420:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     422:	0080      	lsls	r0, r0, #2
     424:	4b14      	ldr	r3, [pc, #80]	; (478 <_tc_interrupt_handler+0x58>)
     426:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     428:	6823      	ldr	r3, [r4, #0]
     42a:	68dd      	ldr	r5, [r3, #12]
     42c:	0c2d      	lsrs	r5, r5, #16
     42e:	7e23      	ldrb	r3, [r4, #24]
     430:	401d      	ands	r5, r3
     432:	7e63      	ldrb	r3, [r4, #25]
     434:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     436:	07ea      	lsls	r2, r5, #31
     438:	d505      	bpl.n	446 <_tc_interrupt_handler+0x26>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     43a:	1c20      	adds	r0, r4, #0
     43c:	68a3      	ldr	r3, [r4, #8]
     43e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     440:	2301      	movs	r3, #1
     442:	6822      	ldr	r2, [r4, #0]
     444:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     446:	07ab      	lsls	r3, r5, #30
     448:	d505      	bpl.n	456 <_tc_interrupt_handler+0x36>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     44a:	1c20      	adds	r0, r4, #0
     44c:	68e2      	ldr	r2, [r4, #12]
     44e:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     450:	2302      	movs	r3, #2
     452:	6822      	ldr	r2, [r4, #0]
     454:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     456:	06eb      	lsls	r3, r5, #27
     458:	d505      	bpl.n	466 <_tc_interrupt_handler+0x46>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     45a:	1c20      	adds	r0, r4, #0
     45c:	6922      	ldr	r2, [r4, #16]
     45e:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     460:	2310      	movs	r3, #16
     462:	6822      	ldr	r2, [r4, #0]
     464:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     466:	06ab      	lsls	r3, r5, #26
     468:	d505      	bpl.n	476 <_tc_interrupt_handler+0x56>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     46a:	1c20      	adds	r0, r4, #0
     46c:	6962      	ldr	r2, [r4, #20]
     46e:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     470:	6823      	ldr	r3, [r4, #0]
     472:	2220      	movs	r2, #32
     474:	739a      	strb	r2, [r3, #14]
	}
}
     476:	bd38      	pop	{r3, r4, r5, pc}
     478:	20000494 	.word	0x20000494

0000047c <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     47c:	b508      	push	{r3, lr}
     47e:	2000      	movs	r0, #0
     480:	4b01      	ldr	r3, [pc, #4]	; (488 <TC0_Handler+0xc>)
     482:	4798      	blx	r3
     484:	bd08      	pop	{r3, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	00000421 	.word	0x00000421

0000048c <TC1_Handler>:
     48c:	b508      	push	{r3, lr}
     48e:	2001      	movs	r0, #1
     490:	4b01      	ldr	r3, [pc, #4]	; (498 <TC1_Handler+0xc>)
     492:	4798      	blx	r3
     494:	bd08      	pop	{r3, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00000421 	.word	0x00000421

0000049c <TC2_Handler>:
     49c:	b508      	push	{r3, lr}
     49e:	2002      	movs	r0, #2
     4a0:	4b01      	ldr	r3, [pc, #4]	; (4a8 <TC2_Handler+0xc>)
     4a2:	4798      	blx	r3
     4a4:	bd08      	pop	{r3, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000421 	.word	0x00000421

000004ac <TC3_Handler>:
     4ac:	b508      	push	{r3, lr}
     4ae:	2003      	movs	r0, #3
     4b0:	4b01      	ldr	r3, [pc, #4]	; (4b8 <TC3_Handler+0xc>)
     4b2:	4798      	blx	r3
     4b4:	bd08      	pop	{r3, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00000421 	.word	0x00000421

000004bc <TC4_Handler>:
     4bc:	b508      	push	{r3, lr}
     4be:	2004      	movs	r0, #4
     4c0:	4b01      	ldr	r3, [pc, #4]	; (4c8 <TC4_Handler+0xc>)
     4c2:	4798      	blx	r3
     4c4:	bd08      	pop	{r3, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00000421 	.word	0x00000421

000004cc <TC5_Handler>:
     4cc:	b508      	push	{r3, lr}
     4ce:	2005      	movs	r0, #5
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <TC5_Handler+0xc>)
     4d2:	4798      	blx	r3
     4d4:	bd08      	pop	{r3, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00000421 	.word	0x00000421

000004dc <TC6_Handler>:
     4dc:	b508      	push	{r3, lr}
     4de:	2006      	movs	r0, #6
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <TC6_Handler+0xc>)
     4e2:	4798      	blx	r3
     4e4:	bd08      	pop	{r3, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	00000421 	.word	0x00000421

000004ec <TC7_Handler>:
     4ec:	b508      	push	{r3, lr}
     4ee:	2007      	movs	r0, #7
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <TC7_Handler+0xc>)
     4f2:	4798      	blx	r3
     4f4:	bd08      	pop	{r3, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00000421 	.word	0x00000421

000004fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	465f      	mov	r7, fp
     500:	4656      	mov	r6, sl
     502:	464d      	mov	r5, r9
     504:	4644      	mov	r4, r8
     506:	b4f0      	push	{r4, r5, r6, r7}
     508:	b08d      	sub	sp, #52	; 0x34
     50a:	1c05      	adds	r5, r0, #0
     50c:	1c0c      	adds	r4, r1, #0
     50e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     510:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     512:	1c08      	adds	r0, r1, #0
     514:	4b79      	ldr	r3, [pc, #484]	; (6fc <usart_init+0x200>)
     516:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     518:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     51a:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     51c:	07ca      	lsls	r2, r1, #31
     51e:	d500      	bpl.n	522 <usart_init+0x26>
     520:	e0e3      	b.n	6ea <usart_init+0x1ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     522:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     524:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     526:	0797      	lsls	r7, r2, #30
     528:	d500      	bpl.n	52c <usart_init+0x30>
     52a:	e0de      	b.n	6ea <usart_init+0x1ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52c:	4b74      	ldr	r3, [pc, #464]	; (700 <usart_init+0x204>)
     52e:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     530:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     532:	2701      	movs	r7, #1
     534:	4097      	lsls	r7, r2
     536:	1c3a      	adds	r2, r7, #0
     538:	430a      	orrs	r2, r1
     53a:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     53c:	a90b      	add	r1, sp, #44	; 0x2c
     53e:	7f73      	ldrb	r3, [r6, #29]
     540:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     542:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     544:	b2c7      	uxtb	r7, r0
     546:	1c38      	adds	r0, r7, #0
     548:	4b6e      	ldr	r3, [pc, #440]	; (704 <usart_init+0x208>)
     54a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     54c:	1c38      	adds	r0, r7, #0
     54e:	4b6e      	ldr	r3, [pc, #440]	; (708 <usart_init+0x20c>)
     550:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     552:	7f70      	ldrb	r0, [r6, #29]
     554:	2100      	movs	r1, #0
     556:	4b6d      	ldr	r3, [pc, #436]	; (70c <usart_init+0x210>)
     558:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     55a:	7af3      	ldrb	r3, [r6, #11]
     55c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     55e:	7d33      	ldrb	r3, [r6, #20]
     560:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     562:	7d73      	ldrb	r3, [r6, #21]
     564:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     566:	682f      	ldr	r7, [r5, #0]
     568:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     56a:	1c38      	adds	r0, r7, #0
     56c:	4b63      	ldr	r3, [pc, #396]	; (6fc <usart_init+0x200>)
     56e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     570:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     572:	2200      	movs	r2, #0
     574:	466b      	mov	r3, sp
     576:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     578:	6831      	ldr	r1, [r6, #0]
     57a:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
     57c:	68f2      	ldr	r2, [r6, #12]
     57e:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     580:	7db3      	ldrb	r3, [r6, #22]
     582:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     584:	6873      	ldr	r3, [r6, #4]
     586:	2b00      	cmp	r3, #0
     588:	d013      	beq.n	5b2 <usart_init+0xb6>
     58a:	2280      	movs	r2, #128	; 0x80
     58c:	0552      	lsls	r2, r2, #21
     58e:	4293      	cmp	r3, r2
     590:	d12b      	bne.n	5ea <usart_init+0xee>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     592:	7df3      	ldrb	r3, [r6, #23]
     594:	2b00      	cmp	r3, #0
     596:	d001      	beq.n	59c <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     598:	682a      	ldr	r2, [r5, #0]
     59a:	e02a      	b.n	5f2 <usart_init+0xf6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     59c:	6937      	ldr	r7, [r6, #16]
     59e:	b2c0      	uxtb	r0, r0
     5a0:	4b5b      	ldr	r3, [pc, #364]	; (710 <usart_init+0x214>)
     5a2:	4798      	blx	r3
     5a4:	1c01      	adds	r1, r0, #0
     5a6:	1c38      	adds	r0, r7, #0
     5a8:	466a      	mov	r2, sp
     5aa:	3216      	adds	r2, #22
     5ac:	4b59      	ldr	r3, [pc, #356]	; (714 <usart_init+0x218>)
     5ae:	4798      	blx	r3
     5b0:	e01c      	b.n	5ec <usart_init+0xf0>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     5b2:	7df3      	ldrb	r3, [r6, #23]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d009      	beq.n	5cc <usart_init+0xd0>
				status_code =
     5b8:	2310      	movs	r3, #16
     5ba:	9300      	str	r3, [sp, #0]
     5bc:	6930      	ldr	r0, [r6, #16]
     5be:	69b1      	ldr	r1, [r6, #24]
     5c0:	466a      	mov	r2, sp
     5c2:	3216      	adds	r2, #22
     5c4:	2300      	movs	r3, #0
     5c6:	4f54      	ldr	r7, [pc, #336]	; (718 <usart_init+0x21c>)
     5c8:	47b8      	blx	r7
     5ca:	e00f      	b.n	5ec <usart_init+0xf0>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     5cc:	6931      	ldr	r1, [r6, #16]
     5ce:	468b      	mov	fp, r1
     5d0:	b2c0      	uxtb	r0, r0
     5d2:	4b4f      	ldr	r3, [pc, #316]	; (710 <usart_init+0x214>)
     5d4:	4798      	blx	r3
     5d6:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     5d8:	2310      	movs	r3, #16
     5da:	9300      	str	r3, [sp, #0]
     5dc:	4658      	mov	r0, fp
     5de:	466a      	mov	r2, sp
     5e0:	3216      	adds	r2, #22
     5e2:	2300      	movs	r3, #0
     5e4:	4f4c      	ldr	r7, [pc, #304]	; (718 <usart_init+0x21c>)
     5e6:	47b8      	blx	r7
     5e8:	e000      	b.n	5ec <usart_init+0xf0>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     5ea:	2000      	movs	r0, #0
     5ec:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
     5ee:	d17c      	bne.n	6ea <usart_init+0x1ee>
     5f0:	e7d2      	b.n	598 <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     5f2:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     5f4:	0418      	lsls	r0, r3, #16
     5f6:	d4fc      	bmi.n	5f2 <usart_init+0xf6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     5f8:	466b      	mov	r3, sp
     5fa:	3316      	adds	r3, #22
     5fc:	881b      	ldrh	r3, [r3, #0]
     5fe:	9f03      	ldr	r7, [sp, #12]
     600:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     602:	4651      	mov	r1, sl
     604:	4648      	mov	r0, r9
     606:	4301      	orrs	r1, r0
     608:	6872      	ldr	r2, [r6, #4]
     60a:	4311      	orrs	r1, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     60c:	4647      	mov	r7, r8
     60e:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     610:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     612:	7df3      	ldrb	r3, [r6, #23]
     614:	2b00      	cmp	r3, #0
     616:	d101      	bne.n	61c <usart_init+0x120>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     618:	2304      	movs	r3, #4
     61a:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     61c:	7d30      	ldrb	r0, [r6, #20]
     61e:	0440      	lsls	r0, r0, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     620:	7d73      	ldrb	r3, [r6, #21]
     622:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     624:	4318      	orrs	r0, r3
     626:	7af2      	ldrb	r2, [r6, #11]
     628:	7ab3      	ldrb	r3, [r6, #10]
     62a:	4313      	orrs	r3, r2
     62c:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     62e:	8933      	ldrh	r3, [r6, #8]
     630:	2bff      	cmp	r3, #255	; 0xff
     632:	d003      	beq.n	63c <usart_init+0x140>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     634:	2280      	movs	r2, #128	; 0x80
     636:	0452      	lsls	r2, r2, #17
     638:	4311      	orrs	r1, r2
#endif
		ctrlb |= config->parity;
     63a:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     63c:	7f33      	ldrb	r3, [r6, #28]
     63e:	2b00      	cmp	r3, #0
     640:	d103      	bne.n	64a <usart_init+0x14e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     642:	4b36      	ldr	r3, [pc, #216]	; (71c <usart_init+0x220>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	039a      	lsls	r2, r3, #14
     648:	d501      	bpl.n	64e <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     64e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     650:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     652:	041f      	lsls	r7, r3, #16
     654:	d4fc      	bmi.n	650 <usart_init+0x154>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     656:	9f03      	ldr	r7, [sp, #12]
     658:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     65a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     65c:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     65e:	0418      	lsls	r0, r3, #16
     660:	d4fc      	bmi.n	65c <usart_init+0x160>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     662:	9f03      	ldr	r7, [sp, #12]
     664:	6039      	str	r1, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     666:	ab0a      	add	r3, sp, #40	; 0x28
     668:	2280      	movs	r2, #128	; 0x80
     66a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     66c:	2200      	movs	r2, #0
     66e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     670:	2101      	movs	r1, #1
     672:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     674:	70da      	strb	r2, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
     676:	6a30      	ldr	r0, [r6, #32]
     678:	9006      	str	r0, [sp, #24]
     67a:	6a71      	ldr	r1, [r6, #36]	; 0x24
     67c:	9107      	str	r1, [sp, #28]
     67e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     680:	9208      	str	r2, [sp, #32]
     682:	6af6      	ldr	r6, [r6, #44]	; 0x2c
     684:	9609      	str	r6, [sp, #36]	; 0x24
     686:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     688:	1c1e      	adds	r6, r3, #0
     68a:	b2f9      	uxtb	r1, r7
     68c:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     68e:	aa06      	add	r2, sp, #24
     690:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     692:	2800      	cmp	r0, #0
     694:	d102      	bne.n	69c <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     696:	1c20      	adds	r0, r4, #0
     698:	4b21      	ldr	r3, [pc, #132]	; (720 <usart_init+0x224>)
     69a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     69c:	1c41      	adds	r1, r0, #1
     69e:	d005      	beq.n	6ac <usart_init+0x1b0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     6a0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     6a2:	0c00      	lsrs	r0, r0, #16
     6a4:	b2c0      	uxtb	r0, r0
     6a6:	1c31      	adds	r1, r6, #0
     6a8:	4a1e      	ldr	r2, [pc, #120]	; (724 <usart_init+0x228>)
     6aa:	4790      	blx	r2
     6ac:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     6ae:	2f04      	cmp	r7, #4
     6b0:	d1eb      	bne.n	68a <usart_init+0x18e>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     6b2:	2300      	movs	r3, #0
     6b4:	60ab      	str	r3, [r5, #8]
     6b6:	60eb      	str	r3, [r5, #12]
     6b8:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
     6ba:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     6bc:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     6be:	2200      	movs	r2, #0
     6c0:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     6c2:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     6c4:	2320      	movs	r3, #32
     6c6:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     6c8:	2321      	movs	r3, #33	; 0x21
     6ca:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     6cc:	2322      	movs	r3, #34	; 0x22
     6ce:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     6d0:	2323      	movs	r3, #35	; 0x23
     6d2:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     6d4:	6828      	ldr	r0, [r5, #0]
     6d6:	4b09      	ldr	r3, [pc, #36]	; (6fc <usart_init+0x200>)
     6d8:	4798      	blx	r3
     6da:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     6dc:	4912      	ldr	r1, [pc, #72]	; (728 <usart_init+0x22c>)
     6de:	4b13      	ldr	r3, [pc, #76]	; (72c <usart_init+0x230>)
     6e0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     6e2:	00a4      	lsls	r4, r4, #2
     6e4:	4b12      	ldr	r3, [pc, #72]	; (730 <usart_init+0x234>)
     6e6:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     6e8:	2300      	movs	r3, #0
}
     6ea:	1c18      	adds	r0, r3, #0
     6ec:	b00d      	add	sp, #52	; 0x34
     6ee:	bc3c      	pop	{r2, r3, r4, r5}
     6f0:	4690      	mov	r8, r2
     6f2:	4699      	mov	r9, r3
     6f4:	46a2      	mov	sl, r4
     6f6:	46ab      	mov	fp, r5
     6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	000008e9 	.word	0x000008e9
     700:	40000400 	.word	0x40000400
     704:	00000ead 	.word	0x00000ead
     708:	00000e1d 	.word	0x00000e1d
     70c:	00000249 	.word	0x00000249
     710:	00000ec9 	.word	0x00000ec9
     714:	00000161 	.word	0x00000161
     718:	00000191 	.word	0x00000191
     71c:	41002000 	.word	0x41002000
     720:	00000299 	.word	0x00000299
     724:	00000f89 	.word	0x00000f89
     728:	000007ad 	.word	0x000007ad
     72c:	00000925 	.word	0x00000925
     730:	200004b4 	.word	0x200004b4

00000734 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     734:	1c93      	adds	r3, r2, #2
     736:	009b      	lsls	r3, r3, #2
     738:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     73a:	2301      	movs	r3, #1
     73c:	4093      	lsls	r3, r2
     73e:	1c1a      	adds	r2, r3, #0
     740:	2320      	movs	r3, #32
     742:	5cc1      	ldrb	r1, [r0, r3]
     744:	430a      	orrs	r2, r1
     746:	54c2      	strb	r2, [r0, r3]
}
     748:	4770      	bx	lr
     74a:	46c0      	nop			; (mov r8, r8)

0000074c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     74c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     74e:	2317      	movs	r3, #23
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
     750:	2a00      	cmp	r2, #0
     752:	d011      	beq.n	778 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     754:	69c4      	ldr	r4, [r0, #28]
     756:	0c24      	lsrs	r4, r4, #16
		return STATUS_BUSY;
     758:	2305      	movs	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     75a:	2c00      	cmp	r4, #0
     75c:	d10c      	bne.n	778 <usart_write_buffer_job+0x2c>
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     75e:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     760:	231c      	movs	r3, #28
	if (module->remaining_tx_buffer_length > 0) {
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     762:	2c00      	cmp	r4, #0
     764:	d008      	beq.n	778 <usart_write_buffer_job+0x2c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     766:	6803      	ldr	r3, [r0, #0]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     768:	83c2      	strh	r2, [r0, #30]
	module->tx_buffer_ptr              = tx_data;
     76a:	6181      	str	r1, [r0, #24]
	module->tx_status                  = STATUS_BUSY;
     76c:	2105      	movs	r1, #5
     76e:	2223      	movs	r2, #35	; 0x23
     770:	5481      	strb	r1, [r0, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     772:	2201      	movs	r2, #1
     774:	735a      	strb	r2, [r3, #13]
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);

	return STATUS_OK;
     776:	2300      	movs	r3, #0
}
     778:	1c18      	adds	r0, r3, #0
     77a:	bd10      	pop	{r4, pc}

0000077c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     77c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     77e:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     780:	2a00      	cmp	r2, #0
     782:	d011      	beq.n	7a8 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     784:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     786:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     788:	2c00      	cmp	r4, #0
     78a:	d00d      	beq.n	7a8 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     78c:	69c4      	ldr	r4, [r0, #28]
     78e:	b2a4      	uxth	r4, r4
		return STATUS_BUSY;
     790:	2305      	movs	r3, #5
	if (!(module->receiver_enabled)) {
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     792:	2c00      	cmp	r4, #0
     794:	d108      	bne.n	7a8 <usart_read_buffer_job+0x2c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     796:	6803      	ldr	r3, [r0, #0]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     798:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr              = rx_data;
     79a:	6141      	str	r1, [r0, #20]
	module->rx_status                  = STATUS_BUSY;
     79c:	2105      	movs	r1, #5
     79e:	2222      	movs	r2, #34	; 0x22
     7a0:	5481      	strb	r1, [r0, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     7a2:	2204      	movs	r2, #4
     7a4:	735a      	strb	r2, [r3, #13]
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);

	return STATUS_OK;
     7a6:	2300      	movs	r3, #0
}
     7a8:	1c18      	adds	r0, r3, #0
     7aa:	bd10      	pop	{r4, pc}

000007ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     7ae:	0080      	lsls	r0, r0, #2
     7b0:	4b4b      	ldr	r3, [pc, #300]	; (8e0 <_usart_interrupt_handler+0x134>)
     7b2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     7b4:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     7b6:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7b8:	0419      	lsls	r1, r3, #16
     7ba:	d4fc      	bmi.n	7b6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     7bc:	68e6      	ldr	r6, [r4, #12]
     7be:	0c36      	lsrs	r6, r6, #16
	interrupt_status &= usart_hw->INTENSET.reg;
     7c0:	68e3      	ldr	r3, [r4, #12]
     7c2:	041b      	lsls	r3, r3, #16
     7c4:	0e1b      	lsrs	r3, r3, #24
     7c6:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     7c8:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     7ca:	5ceb      	ldrb	r3, [r5, r3]
     7cc:	2220      	movs	r2, #32
     7ce:	5caa      	ldrb	r2, [r5, r2]
     7d0:	1c17      	adds	r7, r2, #0
     7d2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     7d4:	07f2      	lsls	r2, r6, #31
     7d6:	d520      	bpl.n	81a <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     7d8:	69eb      	ldr	r3, [r5, #28]
     7da:	0c1b      	lsrs	r3, r3, #16
     7dc:	d01b      	beq.n	816 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     7de:	69ab      	ldr	r3, [r5, #24]
     7e0:	781a      	ldrb	r2, [r3, #0]
     7e2:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     7e4:	1c59      	adds	r1, r3, #1
     7e6:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     7e8:	7969      	ldrb	r1, [r5, #5]
     7ea:	2901      	cmp	r1, #1
     7ec:	d104      	bne.n	7f8 <_usart_interrupt_handler+0x4c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     7ee:	7859      	ldrb	r1, [r3, #1]
     7f0:	0209      	lsls	r1, r1, #8
     7f2:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     7f4:	3302      	adds	r3, #2
     7f6:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     7f8:	05d3      	lsls	r3, r2, #23
     7fa:	0ddb      	lsrs	r3, r3, #23
     7fc:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     7fe:	69eb      	ldr	r3, [r5, #28]
     800:	0c1b      	lsrs	r3, r3, #16
     802:	3b01      	subs	r3, #1
     804:	b29b      	uxth	r3, r3
     806:	83eb      	strh	r3, [r5, #30]
     808:	2b00      	cmp	r3, #0
     80a:	d106      	bne.n	81a <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     80c:	2301      	movs	r3, #1
     80e:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     810:	2302      	movs	r3, #2
     812:	7363      	strb	r3, [r4, #13]
     814:	e001      	b.n	81a <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     816:	2301      	movs	r3, #1
     818:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     81a:	07b3      	lsls	r3, r6, #30
     81c:	d509      	bpl.n	832 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     81e:	2302      	movs	r3, #2
     820:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     822:	2200      	movs	r2, #0
     824:	2323      	movs	r3, #35	; 0x23
     826:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     828:	07f9      	lsls	r1, r7, #31
     82a:	d502      	bpl.n	832 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     82c:	1c28      	adds	r0, r5, #0
     82e:	68aa      	ldr	r2, [r5, #8]
     830:	4790      	blx	r2

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     832:	0773      	lsls	r3, r6, #29
     834:	d552      	bpl.n	8dc <_usart_interrupt_handler+0x130>

		if (module->remaining_rx_buffer_length) {
     836:	69eb      	ldr	r3, [r5, #28]
     838:	b29b      	uxth	r3, r3
     83a:	2b00      	cmp	r3, #0
     83c:	d04c      	beq.n	8d8 <_usart_interrupt_handler+0x12c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     83e:	6923      	ldr	r3, [r4, #16]
     840:	b2db      	uxtb	r3, r3

			/* Check if an error has occurred during the receiving */
			if (error_code) {
     842:	0759      	lsls	r1, r3, #29
     844:	d025      	beq.n	892 <_usart_interrupt_handler+0xe6>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     846:	079a      	lsls	r2, r3, #30
     848:	d508      	bpl.n	85c <_usart_interrupt_handler+0xb0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     84a:	221a      	movs	r2, #26
     84c:	2322      	movs	r3, #34	; 0x22
     84e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     850:	6922      	ldr	r2, [r4, #16]
     852:	b292      	uxth	r2, r2
     854:	2302      	movs	r3, #2
     856:	4313      	orrs	r3, r2
     858:	8223      	strh	r3, [r4, #16]
     85a:	e014      	b.n	886 <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     85c:	0759      	lsls	r1, r3, #29
     85e:	d508      	bpl.n	872 <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     860:	221e      	movs	r2, #30
     862:	2322      	movs	r3, #34	; 0x22
     864:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     866:	6922      	ldr	r2, [r4, #16]
     868:	b292      	uxth	r2, r2
     86a:	2304      	movs	r3, #4
     86c:	4313      	orrs	r3, r2
     86e:	8223      	strh	r3, [r4, #16]
     870:	e009      	b.n	886 <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     872:	07da      	lsls	r2, r3, #31
     874:	d507      	bpl.n	886 <_usart_interrupt_handler+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     876:	2213      	movs	r2, #19
     878:	2322      	movs	r3, #34	; 0x22
     87a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     87c:	6922      	ldr	r2, [r4, #16]
     87e:	b292      	uxth	r2, r2
     880:	2301      	movs	r3, #1
     882:	4313      	orrs	r3, r2
     884:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     886:	077b      	lsls	r3, r7, #29
     888:	d528      	bpl.n	8dc <_usart_interrupt_handler+0x130>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     88a:	692b      	ldr	r3, [r5, #16]
     88c:	1c28      	adds	r0, r5, #0
     88e:	4798      	blx	r3
     890:	e024      	b.n	8dc <_usart_interrupt_handler+0x130>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     892:	69a2      	ldr	r2, [r4, #24]
     894:	05d2      	lsls	r2, r2, #23
     896:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     898:	b2d3      	uxtb	r3, r2
     89a:	6969      	ldr	r1, [r5, #20]
     89c:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     89e:	696b      	ldr	r3, [r5, #20]
     8a0:	1c59      	adds	r1, r3, #1
     8a2:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     8a4:	7969      	ldrb	r1, [r5, #5]
     8a6:	2901      	cmp	r1, #1
     8a8:	d104      	bne.n	8b4 <_usart_interrupt_handler+0x108>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     8aa:	0a12      	lsrs	r2, r2, #8
     8ac:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     8ae:	696b      	ldr	r3, [r5, #20]
     8b0:	3301      	adds	r3, #1
     8b2:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     8b4:	69eb      	ldr	r3, [r5, #28]
     8b6:	b29b      	uxth	r3, r3
     8b8:	3b01      	subs	r3, #1
     8ba:	b29b      	uxth	r3, r3
     8bc:	83ab      	strh	r3, [r5, #28]
     8be:	2b00      	cmp	r3, #0
     8c0:	d10c      	bne.n	8dc <_usart_interrupt_handler+0x130>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     8c2:	2304      	movs	r3, #4
     8c4:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     8c6:	2200      	movs	r2, #0
     8c8:	2322      	movs	r3, #34	; 0x22
     8ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     8cc:	07ba      	lsls	r2, r7, #30
     8ce:	d505      	bpl.n	8dc <_usart_interrupt_handler+0x130>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     8d0:	68eb      	ldr	r3, [r5, #12]
     8d2:	1c28      	adds	r0, r5, #0
     8d4:	4798      	blx	r3
     8d6:	e001      	b.n	8dc <_usart_interrupt_handler+0x130>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     8d8:	2304      	movs	r3, #4
     8da:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	200004b4 	.word	0x200004b4

000008e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8e4:	4770      	bx	lr
     8e6:	46c0      	nop			; (mov r8, r8)

000008e8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8e8:	b570      	push	{r4, r5, r6, lr}
     8ea:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8ec:	4a0c      	ldr	r2, [pc, #48]	; (920 <_sercom_get_sercom_inst_index+0x38>)
     8ee:	466b      	mov	r3, sp
     8f0:	ca70      	ldmia	r2!, {r4, r5, r6}
     8f2:	c370      	stmia	r3!, {r4, r5, r6}
     8f4:	ca32      	ldmia	r2!, {r1, r4, r5}
     8f6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8f8:	9e00      	ldr	r6, [sp, #0]
     8fa:	4286      	cmp	r6, r0
     8fc:	d006      	beq.n	90c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8fe:	2301      	movs	r3, #1
     900:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     902:	4669      	mov	r1, sp
     904:	5852      	ldr	r2, [r2, r1]
     906:	4282      	cmp	r2, r0
     908:	d103      	bne.n	912 <_sercom_get_sercom_inst_index+0x2a>
     90a:	e000      	b.n	90e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     90c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     90e:	b2d8      	uxtb	r0, r3
     910:	e003      	b.n	91a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     912:	3301      	adds	r3, #1
     914:	2b06      	cmp	r3, #6
     916:	d1f3      	bne.n	900 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     918:	2000      	movs	r0, #0
}
     91a:	b006      	add	sp, #24
     91c:	bd70      	pop	{r4, r5, r6, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	00001c7c 	.word	0x00001c7c

00000924 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     924:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     926:	4b0a      	ldr	r3, [pc, #40]	; (950 <_sercom_set_handler+0x2c>)
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	2b00      	cmp	r3, #0
     92c:	d10c      	bne.n	948 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     92e:	4f09      	ldr	r7, [pc, #36]	; (954 <_sercom_set_handler+0x30>)
     930:	4e09      	ldr	r6, [pc, #36]	; (958 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     932:	4d0a      	ldr	r5, [pc, #40]	; (95c <_sercom_set_handler+0x38>)
     934:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     936:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     938:	195a      	adds	r2, r3, r5
     93a:	6014      	str	r4, [r2, #0]
     93c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     93e:	2b18      	cmp	r3, #24
     940:	d1f9      	bne.n	936 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     942:	2201      	movs	r2, #1
     944:	4b02      	ldr	r3, [pc, #8]	; (950 <_sercom_set_handler+0x2c>)
     946:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     948:	0080      	lsls	r0, r0, #2
     94a:	4b02      	ldr	r3, [pc, #8]	; (954 <_sercom_set_handler+0x30>)
     94c:	50c1      	str	r1, [r0, r3]
}
     94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     950:	20000458 	.word	0x20000458
     954:	2000045c 	.word	0x2000045c
     958:	000008e5 	.word	0x000008e5
     95c:	200004b4 	.word	0x200004b4

00000960 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     960:	b510      	push	{r4, lr}
     962:	b082      	sub	sp, #8
     964:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     966:	4668      	mov	r0, sp
     968:	4905      	ldr	r1, [pc, #20]	; (980 <_sercom_get_interrupt_vector+0x20>)
     96a:	3118      	adds	r1, #24
     96c:	2206      	movs	r2, #6
     96e:	4b05      	ldr	r3, [pc, #20]	; (984 <_sercom_get_interrupt_vector+0x24>)
     970:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     972:	1c20      	adds	r0, r4, #0
     974:	4b04      	ldr	r3, [pc, #16]	; (988 <_sercom_get_interrupt_vector+0x28>)
     976:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     978:	466b      	mov	r3, sp
     97a:	5618      	ldrsb	r0, [r3, r0]
}
     97c:	b002      	add	sp, #8
     97e:	bd10      	pop	{r4, pc}
     980:	00001c7c 	.word	0x00001c7c
     984:	00001bb5 	.word	0x00001bb5
     988:	000008e9 	.word	0x000008e9

0000098c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     98c:	b508      	push	{r3, lr}
     98e:	4b02      	ldr	r3, [pc, #8]	; (998 <SERCOM0_Handler+0xc>)
     990:	681b      	ldr	r3, [r3, #0]
     992:	2000      	movs	r0, #0
     994:	4798      	blx	r3
     996:	bd08      	pop	{r3, pc}
     998:	2000045c 	.word	0x2000045c

0000099c <SERCOM1_Handler>:
     99c:	b508      	push	{r3, lr}
     99e:	4b02      	ldr	r3, [pc, #8]	; (9a8 <SERCOM1_Handler+0xc>)
     9a0:	685b      	ldr	r3, [r3, #4]
     9a2:	2001      	movs	r0, #1
     9a4:	4798      	blx	r3
     9a6:	bd08      	pop	{r3, pc}
     9a8:	2000045c 	.word	0x2000045c

000009ac <SERCOM2_Handler>:
     9ac:	b508      	push	{r3, lr}
     9ae:	4b02      	ldr	r3, [pc, #8]	; (9b8 <SERCOM2_Handler+0xc>)
     9b0:	689b      	ldr	r3, [r3, #8]
     9b2:	2002      	movs	r0, #2
     9b4:	4798      	blx	r3
     9b6:	bd08      	pop	{r3, pc}
     9b8:	2000045c 	.word	0x2000045c

000009bc <SERCOM3_Handler>:
     9bc:	b508      	push	{r3, lr}
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <SERCOM3_Handler+0xc>)
     9c0:	68db      	ldr	r3, [r3, #12]
     9c2:	2003      	movs	r0, #3
     9c4:	4798      	blx	r3
     9c6:	bd08      	pop	{r3, pc}
     9c8:	2000045c 	.word	0x2000045c

000009cc <SERCOM4_Handler>:
     9cc:	b508      	push	{r3, lr}
     9ce:	4b02      	ldr	r3, [pc, #8]	; (9d8 <SERCOM4_Handler+0xc>)
     9d0:	691b      	ldr	r3, [r3, #16]
     9d2:	2004      	movs	r0, #4
     9d4:	4798      	blx	r3
     9d6:	bd08      	pop	{r3, pc}
     9d8:	2000045c 	.word	0x2000045c

000009dc <SERCOM5_Handler>:
     9dc:	b508      	push	{r3, lr}
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <SERCOM5_Handler+0xc>)
     9e0:	695b      	ldr	r3, [r3, #20]
     9e2:	2005      	movs	r0, #5
     9e4:	4798      	blx	r3
     9e6:	bd08      	pop	{r3, pc}
     9e8:	2000045c 	.word	0x2000045c

000009ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     9ec:	4b0c      	ldr	r3, [pc, #48]	; (a20 <cpu_irq_enter_critical+0x34>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d110      	bne.n	a16 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     9f8:	2b00      	cmp	r3, #0
     9fa:	d109      	bne.n	a10 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     9fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     9fe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a02:	2200      	movs	r2, #0
     a04:	4b07      	ldr	r3, [pc, #28]	; (a24 <cpu_irq_enter_critical+0x38>)
     a06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a08:	2201      	movs	r2, #1
     a0a:	4b07      	ldr	r3, [pc, #28]	; (a28 <cpu_irq_enter_critical+0x3c>)
     a0c:	701a      	strb	r2, [r3, #0]
     a0e:	e002      	b.n	a16 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a10:	2200      	movs	r2, #0
     a12:	4b05      	ldr	r3, [pc, #20]	; (a28 <cpu_irq_enter_critical+0x3c>)
     a14:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a16:	4b02      	ldr	r3, [pc, #8]	; (a20 <cpu_irq_enter_critical+0x34>)
     a18:	681a      	ldr	r2, [r3, #0]
     a1a:	3201      	adds	r2, #1
     a1c:	601a      	str	r2, [r3, #0]
}
     a1e:	4770      	bx	lr
     a20:	20000474 	.word	0x20000474
     a24:	20000000 	.word	0x20000000
     a28:	20000478 	.word	0x20000478

00000a2c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <cpu_irq_leave_critical+0x24>)
     a2e:	681a      	ldr	r2, [r3, #0]
     a30:	3a01      	subs	r2, #1
     a32:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	2b00      	cmp	r3, #0
     a38:	d109      	bne.n	a4e <cpu_irq_leave_critical+0x22>
     a3a:	4b06      	ldr	r3, [pc, #24]	; (a54 <cpu_irq_leave_critical+0x28>)
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	2b00      	cmp	r3, #0
     a40:	d005      	beq.n	a4e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     a42:	2201      	movs	r2, #1
     a44:	4b04      	ldr	r3, [pc, #16]	; (a58 <cpu_irq_leave_critical+0x2c>)
     a46:	701a      	strb	r2, [r3, #0]
     a48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     a4c:	b662      	cpsie	i
	}
}
     a4e:	4770      	bx	lr
     a50:	20000474 	.word	0x20000474
     a54:	20000478 	.word	0x20000478
     a58:	20000000 	.word	0x20000000

00000a5c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a60:	ac01      	add	r4, sp, #4
     a62:	2501      	movs	r5, #1
     a64:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     a66:	2700      	movs	r7, #0
     a68:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a6a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a6c:	200e      	movs	r0, #14
     a6e:	1c21      	adds	r1, r4, #0
     a70:	4e06      	ldr	r6, [pc, #24]	; (a8c <system_board_init+0x30>)
     a72:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a74:	2280      	movs	r2, #128	; 0x80
     a76:	01d2      	lsls	r2, r2, #7
     a78:	4b05      	ldr	r3, [pc, #20]	; (a90 <system_board_init+0x34>)
     a7a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a7c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a7e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a80:	200f      	movs	r0, #15
     a82:	1c21      	adds	r1, r4, #0
     a84:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
     a86:	b003      	add	sp, #12
     a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000a95 	.word	0x00000a95
     a90:	41004400 	.word	0x41004400

00000a94 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a94:	b500      	push	{lr}
     a96:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a98:	ab01      	add	r3, sp, #4
     a9a:	2280      	movs	r2, #128	; 0x80
     a9c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a9e:	780a      	ldrb	r2, [r1, #0]
     aa0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     aa2:	784a      	ldrb	r2, [r1, #1]
     aa4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     aa6:	788a      	ldrb	r2, [r1, #2]
     aa8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     aaa:	1c19      	adds	r1, r3, #0
     aac:	4b01      	ldr	r3, [pc, #4]	; (ab4 <port_pin_set_config+0x20>)
     aae:	4798      	blx	r3
}
     ab0:	b003      	add	sp, #12
     ab2:	bd00      	pop	{pc}
     ab4:	00000f89 	.word	0x00000f89

00000ab8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ab8:	b508      	push	{r3, lr}
	switch (clock_source) {
     aba:	2807      	cmp	r0, #7
     abc:	d82b      	bhi.n	b16 <system_clock_source_get_hz+0x5e>
     abe:	0080      	lsls	r0, r0, #2
     ac0:	4b17      	ldr	r3, [pc, #92]	; (b20 <system_clock_source_get_hz+0x68>)
     ac2:	581b      	ldr	r3, [r3, r0]
     ac4:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     ac6:	2080      	movs	r0, #128	; 0x80
     ac8:	0200      	lsls	r0, r0, #8
     aca:	e027      	b.n	b1c <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     acc:	4b15      	ldr	r3, [pc, #84]	; (b24 <system_clock_source_get_hz+0x6c>)
     ace:	68d8      	ldr	r0, [r3, #12]
     ad0:	e024      	b.n	b1c <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ad2:	4b15      	ldr	r3, [pc, #84]	; (b28 <system_clock_source_get_hz+0x70>)
     ad4:	6a18      	ldr	r0, [r3, #32]
     ad6:	0580      	lsls	r0, r0, #22
     ad8:	0f80      	lsrs	r0, r0, #30
     ada:	4b14      	ldr	r3, [pc, #80]	; (b2c <system_clock_source_get_hz+0x74>)
     adc:	40c3      	lsrs	r3, r0
     ade:	1c18      	adds	r0, r3, #0
     ae0:	e01c      	b.n	b1c <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     ae2:	4b10      	ldr	r3, [pc, #64]	; (b24 <system_clock_source_get_hz+0x6c>)
     ae4:	6918      	ldr	r0, [r3, #16]
     ae6:	e019      	b.n	b1c <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ae8:	4b0e      	ldr	r3, [pc, #56]	; (b24 <system_clock_source_get_hz+0x6c>)
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	2002      	movs	r0, #2
     aee:	4018      	ands	r0, r3
     af0:	d014      	beq.n	b1c <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     af2:	490d      	ldr	r1, [pc, #52]	; (b28 <system_clock_source_get_hz+0x70>)
     af4:	2210      	movs	r2, #16
     af6:	68cb      	ldr	r3, [r1, #12]
     af8:	421a      	tst	r2, r3
     afa:	d0fc      	beq.n	af6 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     afc:	4b09      	ldr	r3, [pc, #36]	; (b24 <system_clock_source_get_hz+0x6c>)
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	075a      	lsls	r2, r3, #29
     b02:	d50a      	bpl.n	b1a <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b04:	2000      	movs	r0, #0
     b06:	4b0a      	ldr	r3, [pc, #40]	; (b30 <system_clock_source_get_hz+0x78>)
     b08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b0a:	4b06      	ldr	r3, [pc, #24]	; (b24 <system_clock_source_get_hz+0x6c>)
     b0c:	689b      	ldr	r3, [r3, #8]
     b0e:	041b      	lsls	r3, r3, #16
     b10:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b12:	4358      	muls	r0, r3
     b14:	e002      	b.n	b1c <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
     b16:	2000      	movs	r0, #0
     b18:	e000      	b.n	b1c <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     b1a:	4806      	ldr	r0, [pc, #24]	; (b34 <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
     b1c:	bd08      	pop	{r3, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00001c9c 	.word	0x00001c9c
     b24:	2000047c 	.word	0x2000047c
     b28:	40000800 	.word	0x40000800
     b2c:	007a1200 	.word	0x007a1200
     b30:	00000ec9 	.word	0x00000ec9
     b34:	02dc6c00 	.word	0x02dc6c00

00000b38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     b38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     b3a:	4b0c      	ldr	r3, [pc, #48]	; (b6c <system_clock_source_osc8m_set_config+0x34>)
     b3c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     b3e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     b40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     b42:	7840      	ldrb	r0, [r0, #1]
     b44:	2201      	movs	r2, #1
     b46:	4010      	ands	r0, r2
     b48:	0180      	lsls	r0, r0, #6
     b4a:	2640      	movs	r6, #64	; 0x40
     b4c:	43b4      	bics	r4, r6
     b4e:	4304      	orrs	r4, r0
     b50:	402a      	ands	r2, r5
     b52:	01d0      	lsls	r0, r2, #7
     b54:	2280      	movs	r2, #128	; 0x80
     b56:	4394      	bics	r4, r2
     b58:	1c22      	adds	r2, r4, #0
     b5a:	4302      	orrs	r2, r0
     b5c:	2003      	movs	r0, #3
     b5e:	4001      	ands	r1, r0
     b60:	0209      	lsls	r1, r1, #8
     b62:	4803      	ldr	r0, [pc, #12]	; (b70 <system_clock_source_osc8m_set_config+0x38>)
     b64:	4002      	ands	r2, r0
     b66:	430a      	orrs	r2, r1
     b68:	621a      	str	r2, [r3, #32]
}
     b6a:	bd70      	pop	{r4, r5, r6, pc}
     b6c:	40000800 	.word	0x40000800
     b70:	fffffcff 	.word	0xfffffcff

00000b74 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     b74:	2807      	cmp	r0, #7
     b76:	d83d      	bhi.n	bf4 <system_clock_source_enable+0x80>
     b78:	0080      	lsls	r0, r0, #2
     b7a:	4b1f      	ldr	r3, [pc, #124]	; (bf8 <system_clock_source_enable+0x84>)
     b7c:	581b      	ldr	r3, [r3, r0]
     b7e:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     b80:	2000      	movs	r0, #0
     b82:	e038      	b.n	bf6 <system_clock_source_enable+0x82>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     b84:	4b1d      	ldr	r3, [pc, #116]	; (bfc <system_clock_source_enable+0x88>)
     b86:	6a19      	ldr	r1, [r3, #32]
     b88:	2202      	movs	r2, #2
     b8a:	430a      	orrs	r2, r1
     b8c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     b8e:	2000      	movs	r0, #0
     b90:	e031      	b.n	bf6 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     b92:	4b1a      	ldr	r3, [pc, #104]	; (bfc <system_clock_source_enable+0x88>)
     b94:	6999      	ldr	r1, [r3, #24]
     b96:	2202      	movs	r2, #2
     b98:	430a      	orrs	r2, r1
     b9a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     b9c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     b9e:	e02a      	b.n	bf6 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ba0:	4b16      	ldr	r3, [pc, #88]	; (bfc <system_clock_source_enable+0x88>)
     ba2:	691a      	ldr	r2, [r3, #16]
     ba4:	b292      	uxth	r2, r2
     ba6:	2102      	movs	r1, #2
     ba8:	430a      	orrs	r2, r1
     baa:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     bac:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     bae:	e022      	b.n	bf6 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     bb0:	4b12      	ldr	r3, [pc, #72]	; (bfc <system_clock_source_enable+0x88>)
     bb2:	695a      	ldr	r2, [r3, #20]
     bb4:	b292      	uxth	r2, r2
     bb6:	2102      	movs	r1, #2
     bb8:	430a      	orrs	r2, r1
     bba:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     bbc:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     bbe:	e01a      	b.n	bf6 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     bc0:	4b0f      	ldr	r3, [pc, #60]	; (c00 <system_clock_source_enable+0x8c>)
     bc2:	6819      	ldr	r1, [r3, #0]
     bc4:	2202      	movs	r2, #2
     bc6:	430a      	orrs	r2, r1
     bc8:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     bca:	681a      	ldr	r2, [r3, #0]
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <system_clock_source_enable+0x90>)
     bce:	401a      	ands	r2, r3
     bd0:	4b0a      	ldr	r3, [pc, #40]	; (bfc <system_clock_source_enable+0x88>)
     bd2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     bd4:	1c19      	adds	r1, r3, #0
     bd6:	2210      	movs	r2, #16
     bd8:	68cb      	ldr	r3, [r1, #12]
     bda:	421a      	tst	r2, r3
     bdc:	d0fc      	beq.n	bd8 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     bde:	4a08      	ldr	r2, [pc, #32]	; (c00 <system_clock_source_enable+0x8c>)
     be0:	6891      	ldr	r1, [r2, #8]
     be2:	4b06      	ldr	r3, [pc, #24]	; (bfc <system_clock_source_enable+0x88>)
     be4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     be6:	6851      	ldr	r1, [r2, #4]
     be8:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     bea:	6812      	ldr	r2, [r2, #0]
     bec:	b292      	uxth	r2, r2
     bee:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     bf0:	2000      	movs	r0, #0
     bf2:	e000      	b.n	bf6 <system_clock_source_enable+0x82>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     bf4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     bf6:	4770      	bx	lr
     bf8:	00001cbc 	.word	0x00001cbc
     bfc:	40000800 	.word	0x40000800
     c00:	2000047c 	.word	0x2000047c
     c04:	0000ff7f 	.word	0x0000ff7f

00000c08 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
     c08:	b530      	push	{r4, r5, lr}
     c0a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
     c0c:	4a14      	ldr	r2, [pc, #80]	; (c60 <system_clock_init+0x58>)
     c0e:	4b15      	ldr	r3, [pc, #84]	; (c64 <system_clock_init+0x5c>)
     c10:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     c12:	4b15      	ldr	r3, [pc, #84]	; (c68 <system_clock_init+0x60>)
     c14:	685a      	ldr	r2, [r3, #4]
     c16:	211e      	movs	r1, #30
     c18:	438a      	bics	r2, r1
     c1a:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     c1c:	a803      	add	r0, sp, #12
     c1e:	2400      	movs	r4, #0
     c20:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     c22:	2501      	movs	r5, #1
     c24:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     c26:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     c28:	4b10      	ldr	r3, [pc, #64]	; (c6c <system_clock_init+0x64>)
     c2a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     c2c:	2006      	movs	r0, #6
     c2e:	4b10      	ldr	r3, [pc, #64]	; (c70 <system_clock_init+0x68>)
     c30:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     c32:	4b10      	ldr	r3, [pc, #64]	; (c74 <system_clock_init+0x6c>)
     c34:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     c36:	4b10      	ldr	r3, [pc, #64]	; (c78 <system_clock_init+0x70>)
     c38:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     c3a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     c3c:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     c3e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     c40:	466a      	mov	r2, sp
     c42:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     c44:	2306      	movs	r3, #6
     c46:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     c48:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     c4a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     c4c:	2000      	movs	r0, #0
     c4e:	4669      	mov	r1, sp
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <system_clock_init+0x74>)
     c52:	4798      	blx	r3
     c54:	2000      	movs	r0, #0
     c56:	4b0a      	ldr	r3, [pc, #40]	; (c80 <system_clock_init+0x78>)
     c58:	4798      	blx	r3
#endif
}
     c5a:	b005      	add	sp, #20
     c5c:	bd30      	pop	{r4, r5, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00003610 	.word	0x00003610
     c64:	40000800 	.word	0x40000800
     c68:	41004000 	.word	0x41004000
     c6c:	00000b39 	.word	0x00000b39
     c70:	00000b75 	.word	0x00000b75
     c74:	00000c85 	.word	0x00000c85
     c78:	40000400 	.word	0x40000400
     c7c:	00000ca9 	.word	0x00000ca9
     c80:	00000d59 	.word	0x00000d59

00000c84 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     c84:	4b06      	ldr	r3, [pc, #24]	; (ca0 <system_gclk_init+0x1c>)
     c86:	6999      	ldr	r1, [r3, #24]
     c88:	2208      	movs	r2, #8
     c8a:	430a      	orrs	r2, r1
     c8c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     c8e:	2201      	movs	r2, #1
     c90:	4b04      	ldr	r3, [pc, #16]	; (ca4 <system_gclk_init+0x20>)
     c92:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     c94:	1c19      	adds	r1, r3, #0
     c96:	680b      	ldr	r3, [r1, #0]
     c98:	4213      	tst	r3, r2
     c9a:	d1fc      	bne.n	c96 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     c9c:	4770      	bx	lr
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	40000400 	.word	0x40000400
     ca4:	40000c00 	.word	0x40000c00

00000ca8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     caa:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     cac:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     cae:	780d      	ldrb	r5, [r1, #0]
     cb0:	022d      	lsls	r5, r5, #8
     cb2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     cb4:	784b      	ldrb	r3, [r1, #1]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d002      	beq.n	cc0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	02db      	lsls	r3, r3, #11
     cbe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     cc0:	7a4b      	ldrb	r3, [r1, #9]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d002      	beq.n	ccc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     cc6:	2380      	movs	r3, #128	; 0x80
     cc8:	031b      	lsls	r3, r3, #12
     cca:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ccc:	684c      	ldr	r4, [r1, #4]
     cce:	2c01      	cmp	r4, #1
     cd0:	d917      	bls.n	d02 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     cd2:	1e63      	subs	r3, r4, #1
     cd4:	421c      	tst	r4, r3
     cd6:	d10f      	bne.n	cf8 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     cd8:	2c02      	cmp	r4, #2
     cda:	d906      	bls.n	cea <system_gclk_gen_set_config+0x42>
     cdc:	2302      	movs	r3, #2
     cde:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     ce0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     ce2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     ce4:	429c      	cmp	r4, r3
     ce6:	d8fb      	bhi.n	ce0 <system_gclk_gen_set_config+0x38>
     ce8:	e000      	b.n	cec <system_gclk_gen_set_config+0x44>
     cea:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     cec:	0217      	lsls	r7, r2, #8
     cee:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     cf0:	2380      	movs	r3, #128	; 0x80
     cf2:	035b      	lsls	r3, r3, #13
     cf4:	431d      	orrs	r5, r3
     cf6:	e004      	b.n	d02 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     cf8:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     cfa:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     cfc:	2380      	movs	r3, #128	; 0x80
     cfe:	029b      	lsls	r3, r3, #10
     d00:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     d02:	7a0b      	ldrb	r3, [r1, #8]
     d04:	2b00      	cmp	r3, #0
     d06:	d002      	beq.n	d0e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     d08:	2380      	movs	r3, #128	; 0x80
     d0a:	039b      	lsls	r3, r3, #14
     d0c:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
     d0e:	4a0e      	ldr	r2, [pc, #56]	; (d48 <system_gclk_gen_set_config+0xa0>)
     d10:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
     d12:	0419      	lsls	r1, r3, #16
     d14:	d4fc      	bmi.n	d10 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d16:	4b0d      	ldr	r3, [pc, #52]	; (d4c <system_gclk_gen_set_config+0xa4>)
     d18:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     d1a:	4b0d      	ldr	r3, [pc, #52]	; (d50 <system_gclk_gen_set_config+0xa8>)
     d1c:	701e      	strb	r6, [r3, #0]
     d1e:	490a      	ldr	r1, [pc, #40]	; (d48 <system_gclk_gen_set_config+0xa0>)
     d20:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     d22:	041a      	lsls	r2, r3, #16
     d24:	d4fc      	bmi.n	d20 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     d26:	4b08      	ldr	r3, [pc, #32]	; (d48 <system_gclk_gen_set_config+0xa0>)
     d28:	609f      	str	r7, [r3, #8]
     d2a:	1c1a      	adds	r2, r3, #0
     d2c:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
     d2e:	0419      	lsls	r1, r3, #16
     d30:	d4fc      	bmi.n	d2c <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <system_gclk_gen_set_config+0xa0>)
     d34:	6859      	ldr	r1, [r3, #4]
     d36:	2280      	movs	r2, #128	; 0x80
     d38:	0252      	lsls	r2, r2, #9
     d3a:	400a      	ands	r2, r1
     d3c:	4315      	orrs	r5, r2
     d3e:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d40:	4b04      	ldr	r3, [pc, #16]	; (d54 <system_gclk_gen_set_config+0xac>)
     d42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	40000c00 	.word	0x40000c00
     d4c:	000009ed 	.word	0x000009ed
     d50:	40000c08 	.word	0x40000c08
     d54:	00000a2d 	.word	0x00000a2d

00000d58 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     d58:	b510      	push	{r4, lr}
     d5a:	1c04      	adds	r4, r0, #0
     d5c:	4a0a      	ldr	r2, [pc, #40]	; (d88 <system_gclk_gen_enable+0x30>)
     d5e:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     d60:	0419      	lsls	r1, r3, #16
     d62:	d4fc      	bmi.n	d5e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     d64:	4b09      	ldr	r3, [pc, #36]	; (d8c <system_gclk_gen_enable+0x34>)
     d66:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     d68:	4b09      	ldr	r3, [pc, #36]	; (d90 <system_gclk_gen_enable+0x38>)
     d6a:	701c      	strb	r4, [r3, #0]
     d6c:	4a06      	ldr	r2, [pc, #24]	; (d88 <system_gclk_gen_enable+0x30>)
     d6e:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     d70:	0419      	lsls	r1, r3, #16
     d72:	d4fc      	bmi.n	d6e <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     d74:	4b04      	ldr	r3, [pc, #16]	; (d88 <system_gclk_gen_enable+0x30>)
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	2280      	movs	r2, #128	; 0x80
     d7a:	0252      	lsls	r2, r2, #9
     d7c:	430a      	orrs	r2, r1
     d7e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     d80:	4b04      	ldr	r3, [pc, #16]	; (d94 <system_gclk_gen_enable+0x3c>)
     d82:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d84:	bd10      	pop	{r4, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	40000c00 	.word	0x40000c00
     d8c:	000009ed 	.word	0x000009ed
     d90:	40000c04 	.word	0x40000c04
     d94:	00000a2d 	.word	0x00000a2d

00000d98 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	1c04      	adds	r4, r0, #0
     d9c:	4a18      	ldr	r2, [pc, #96]	; (e00 <system_gclk_gen_get_hz+0x68>)
     d9e:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     da0:	0419      	lsls	r1, r3, #16
     da2:	d4fc      	bmi.n	d9e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     da4:	4b17      	ldr	r3, [pc, #92]	; (e04 <system_gclk_gen_get_hz+0x6c>)
     da6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     da8:	4b17      	ldr	r3, [pc, #92]	; (e08 <system_gclk_gen_get_hz+0x70>)
     daa:	701c      	strb	r4, [r3, #0]
     dac:	4a14      	ldr	r2, [pc, #80]	; (e00 <system_gclk_gen_get_hz+0x68>)
     dae:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     db0:	0419      	lsls	r1, r3, #16
     db2:	d4fc      	bmi.n	dae <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     db4:	4e12      	ldr	r6, [pc, #72]	; (e00 <system_gclk_gen_get_hz+0x68>)
     db6:	6870      	ldr	r0, [r6, #4]
     db8:	04c0      	lsls	r0, r0, #19
     dba:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     dbc:	4b13      	ldr	r3, [pc, #76]	; (e0c <system_gclk_gen_get_hz+0x74>)
     dbe:	4798      	blx	r3
     dc0:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     dc2:	4b11      	ldr	r3, [pc, #68]	; (e08 <system_gclk_gen_get_hz+0x70>)
     dc4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     dc6:	6876      	ldr	r6, [r6, #4]
     dc8:	02f6      	lsls	r6, r6, #11
     dca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <system_gclk_gen_get_hz+0x78>)
     dce:	701c      	strb	r4, [r3, #0]
     dd0:	4a0b      	ldr	r2, [pc, #44]	; (e00 <system_gclk_gen_get_hz+0x68>)
     dd2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     dd4:	0419      	lsls	r1, r3, #16
     dd6:	d4fc      	bmi.n	dd2 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     dd8:	4b09      	ldr	r3, [pc, #36]	; (e00 <system_gclk_gen_get_hz+0x68>)
     dda:	689c      	ldr	r4, [r3, #8]
     ddc:	0224      	lsls	r4, r4, #8
     dde:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     de0:	4b0c      	ldr	r3, [pc, #48]	; (e14 <system_gclk_gen_get_hz+0x7c>)
     de2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     de4:	2e00      	cmp	r6, #0
     de6:	d107      	bne.n	df8 <system_gclk_gen_get_hz+0x60>
     de8:	2c01      	cmp	r4, #1
     dea:	d907      	bls.n	dfc <system_gclk_gen_get_hz+0x64>
		gen_input_hz /= divider;
     dec:	1c28      	adds	r0, r5, #0
     dee:	1c21      	adds	r1, r4, #0
     df0:	4b09      	ldr	r3, [pc, #36]	; (e18 <system_gclk_gen_get_hz+0x80>)
     df2:	4798      	blx	r3
     df4:	1c05      	adds	r5, r0, #0
     df6:	e001      	b.n	dfc <system_gclk_gen_get_hz+0x64>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     df8:	3401      	adds	r4, #1
     dfa:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     dfc:	1c28      	adds	r0, r5, #0
     dfe:	bd70      	pop	{r4, r5, r6, pc}
     e00:	40000c00 	.word	0x40000c00
     e04:	000009ed 	.word	0x000009ed
     e08:	40000c04 	.word	0x40000c04
     e0c:	00000ab9 	.word	0x00000ab9
     e10:	40000c08 	.word	0x40000c08
     e14:	00000a2d 	.word	0x00000a2d
     e18:	00001235 	.word	0x00001235

00000e1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     e1c:	b510      	push	{r4, lr}
     e1e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e20:	4b06      	ldr	r3, [pc, #24]	; (e3c <system_gclk_chan_enable+0x20>)
     e22:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     e24:	4b06      	ldr	r3, [pc, #24]	; (e40 <system_gclk_chan_enable+0x24>)
     e26:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     e28:	4b06      	ldr	r3, [pc, #24]	; (e44 <system_gclk_chan_enable+0x28>)
     e2a:	6819      	ldr	r1, [r3, #0]
     e2c:	0c09      	lsrs	r1, r1, #16
     e2e:	2280      	movs	r2, #128	; 0x80
     e30:	01d2      	lsls	r2, r2, #7
     e32:	430a      	orrs	r2, r1
     e34:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <system_gclk_chan_enable+0x2c>)
     e38:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e3a:	bd10      	pop	{r4, pc}
     e3c:	000009ed 	.word	0x000009ed
     e40:	40000c02 	.word	0x40000c02
     e44:	40000c00 	.word	0x40000c00
     e48:	00000a2d 	.word	0x00000a2d

00000e4c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     e4c:	b510      	push	{r4, lr}
     e4e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e50:	4b10      	ldr	r3, [pc, #64]	; (e94 <system_gclk_chan_disable+0x48>)
     e52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     e54:	4b10      	ldr	r3, [pc, #64]	; (e98 <system_gclk_chan_disable+0x4c>)
     e56:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     e58:	4b10      	ldr	r3, [pc, #64]	; (e9c <system_gclk_chan_disable+0x50>)
     e5a:	6818      	ldr	r0, [r3, #0]
     e5c:	0100      	lsls	r0, r0, #4
     e5e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     e60:	8859      	ldrh	r1, [r3, #2]
     e62:	4a0f      	ldr	r2, [pc, #60]	; (ea0 <system_gclk_chan_disable+0x54>)
     e64:	400a      	ands	r2, r1
     e66:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     e68:	681a      	ldr	r2, [r3, #0]
     e6a:	0c12      	lsrs	r2, r2, #16
     e6c:	490d      	ldr	r1, [pc, #52]	; (ea4 <system_gclk_chan_disable+0x58>)
     e6e:	400a      	ands	r2, r1
     e70:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     e72:	1c19      	adds	r1, r3, #0
     e74:	2280      	movs	r2, #128	; 0x80
     e76:	01d2      	lsls	r2, r2, #7
     e78:	680b      	ldr	r3, [r1, #0]
     e7a:	0c1b      	lsrs	r3, r3, #16
     e7c:	4213      	tst	r3, r2
     e7e:	d1fb      	bne.n	e78 <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     e80:	4b06      	ldr	r3, [pc, #24]	; (e9c <system_gclk_chan_disable+0x50>)
     e82:	0201      	lsls	r1, r0, #8
     e84:	8858      	ldrh	r0, [r3, #2]
     e86:	4a06      	ldr	r2, [pc, #24]	; (ea0 <system_gclk_chan_disable+0x54>)
     e88:	4002      	ands	r2, r0
     e8a:	430a      	orrs	r2, r1
     e8c:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <system_gclk_chan_disable+0x5c>)
     e90:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e92:	bd10      	pop	{r4, pc}
     e94:	000009ed 	.word	0x000009ed
     e98:	40000c02 	.word	0x40000c02
     e9c:	40000c00 	.word	0x40000c00
     ea0:	fffff0ff 	.word	0xfffff0ff
     ea4:	ffffbfff 	.word	0xffffbfff
     ea8:	00000a2d 	.word	0x00000a2d

00000eac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     eac:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     eae:	780c      	ldrb	r4, [r1, #0]
     eb0:	0224      	lsls	r4, r4, #8
     eb2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     eb4:	4b02      	ldr	r3, [pc, #8]	; (ec0 <system_gclk_chan_set_config+0x14>)
     eb6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     eb8:	b2a4      	uxth	r4, r4
     eba:	4b02      	ldr	r3, [pc, #8]	; (ec4 <system_gclk_chan_set_config+0x18>)
     ebc:	805c      	strh	r4, [r3, #2]
}
     ebe:	bd10      	pop	{r4, pc}
     ec0:	00000e4d 	.word	0x00000e4d
     ec4:	40000c00 	.word	0x40000c00

00000ec8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     ec8:	b510      	push	{r4, lr}
     eca:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <system_gclk_chan_get_hz+0x20>)
     ece:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     ed0:	4b06      	ldr	r3, [pc, #24]	; (eec <system_gclk_chan_get_hz+0x24>)
     ed2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <system_gclk_chan_get_hz+0x28>)
     ed6:	681c      	ldr	r4, [r3, #0]
     ed8:	0124      	lsls	r4, r4, #4
     eda:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     edc:	4b05      	ldr	r3, [pc, #20]	; (ef4 <system_gclk_chan_get_hz+0x2c>)
     ede:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     ee0:	1c20      	adds	r0, r4, #0
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <system_gclk_chan_get_hz+0x30>)
     ee4:	4798      	blx	r3
}
     ee6:	bd10      	pop	{r4, pc}
     ee8:	000009ed 	.word	0x000009ed
     eec:	40000c02 	.word	0x40000c02
     ef0:	40000c00 	.word	0x40000c00
     ef4:	00000a2d 	.word	0x00000a2d
     ef8:	00000d99 	.word	0x00000d99

00000efc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     efc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     efe:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     f00:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     f02:	2c00      	cmp	r4, #0
     f04:	d11e      	bne.n	f44 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     f06:	7813      	ldrb	r3, [r2, #0]
     f08:	2b80      	cmp	r3, #128	; 0x80
     f0a:	d004      	beq.n	f16 <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     f0c:	061b      	lsls	r3, r3, #24
     f0e:	2480      	movs	r4, #128	; 0x80
     f10:	0264      	lsls	r4, r4, #9
     f12:	4323      	orrs	r3, r4
     f14:	e000      	b.n	f18 <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     f16:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     f18:	7854      	ldrb	r4, [r2, #1]
     f1a:	2502      	movs	r5, #2
     f1c:	43ac      	bics	r4, r5
     f1e:	d10a      	bne.n	f36 <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     f20:	7894      	ldrb	r4, [r2, #2]
     f22:	2c00      	cmp	r4, #0
     f24:	d103      	bne.n	f2e <_system_pinmux_config+0x32>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     f26:	2480      	movs	r4, #128	; 0x80
     f28:	02a4      	lsls	r4, r4, #10
     f2a:	4323      	orrs	r3, r4
     f2c:	e002      	b.n	f34 <_system_pinmux_config+0x38>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     f2e:	24c0      	movs	r4, #192	; 0xc0
     f30:	02e4      	lsls	r4, r4, #11
     f32:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     f34:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     f36:	7854      	ldrb	r4, [r2, #1]
     f38:	3c01      	subs	r4, #1
     f3a:	b2e4      	uxtb	r4, r4
     f3c:	2c01      	cmp	r4, #1
     f3e:	d801      	bhi.n	f44 <_system_pinmux_config+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     f40:	4c10      	ldr	r4, [pc, #64]	; (f84 <_system_pinmux_config+0x88>)
     f42:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     f44:	040d      	lsls	r5, r1, #16
     f46:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f48:	24a0      	movs	r4, #160	; 0xa0
     f4a:	05e4      	lsls	r4, r4, #23
     f4c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     f4e:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f50:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
     f52:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f54:	24d0      	movs	r4, #208	; 0xd0
     f56:	0624      	lsls	r4, r4, #24
     f58:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     f5a:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     f5c:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     f5e:	78d4      	ldrb	r4, [r2, #3]
     f60:	2c00      	cmp	r4, #0
     f62:	d10d      	bne.n	f80 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     f64:	035c      	lsls	r4, r3, #13
     f66:	d505      	bpl.n	f74 <_system_pinmux_config+0x78>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     f68:	7893      	ldrb	r3, [r2, #2]
     f6a:	2b01      	cmp	r3, #1
     f6c:	d101      	bne.n	f72 <_system_pinmux_config+0x76>
				port->OUTSET.reg = pin_mask;
     f6e:	6181      	str	r1, [r0, #24]
     f70:	e000      	b.n	f74 <_system_pinmux_config+0x78>
			} else {
				port->OUTCLR.reg = pin_mask;
     f72:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     f74:	7853      	ldrb	r3, [r2, #1]
     f76:	3b01      	subs	r3, #1
     f78:	b2db      	uxtb	r3, r3
     f7a:	2b01      	cmp	r3, #1
     f7c:	d800      	bhi.n	f80 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     f7e:	6081      	str	r1, [r0, #8]
		}
	}
}
     f80:	bd30      	pop	{r4, r5, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	fffbffff 	.word	0xfffbffff

00000f88 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     f88:	b508      	push	{r3, lr}
     f8a:	1c03      	adds	r3, r0, #0
     f8c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f8e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f90:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f92:	2900      	cmp	r1, #0
     f94:	d103      	bne.n	f9e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     f96:	0958      	lsrs	r0, r3, #5
     f98:	01c0      	lsls	r0, r0, #7
     f9a:	4904      	ldr	r1, [pc, #16]	; (fac <system_pinmux_pin_set_config+0x24>)
     f9c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     f9e:	211f      	movs	r1, #31
     fa0:	400b      	ands	r3, r1
     fa2:	2101      	movs	r1, #1
     fa4:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     fa6:	4b02      	ldr	r3, [pc, #8]	; (fb0 <system_pinmux_pin_set_config+0x28>)
     fa8:	4798      	blx	r3
}
     faa:	bd08      	pop	{r3, pc}
     fac:	41004400 	.word	0x41004400
     fb0:	00000efd 	.word	0x00000efd

00000fb4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     fb4:	4770      	bx	lr
     fb6:	46c0      	nop			; (mov r8, r8)

00000fb8 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
     fb8:	e7fe      	b.n	fb8 <HardFault_Handler>
     fba:	46c0      	nop			; (mov r8, r8)

00000fbc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     fbc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     fbe:	4b04      	ldr	r3, [pc, #16]	; (fd0 <system_init+0x14>)
     fc0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     fc2:	4b04      	ldr	r3, [pc, #16]	; (fd4 <system_init+0x18>)
     fc4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <system_init+0x1c>)
     fc8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     fca:	4b04      	ldr	r3, [pc, #16]	; (fdc <system_init+0x20>)
     fcc:	4798      	blx	r3
}
     fce:	bd08      	pop	{r3, pc}
     fd0:	00000c09 	.word	0x00000c09
     fd4:	00000a5d 	.word	0x00000a5d
     fd8:	00000fb5 	.word	0x00000fb5
     fdc:	00000fb5 	.word	0x00000fb5

00000fe0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     fe0:	e7fe      	b.n	fe0 <Dummy_Handler>
     fe2:	46c0      	nop			; (mov r8, r8)

00000fe4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     fe4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     fe6:	4b19      	ldr	r3, [pc, #100]	; (104c <Reset_Handler+0x68>)
     fe8:	4a19      	ldr	r2, [pc, #100]	; (1050 <Reset_Handler+0x6c>)
     fea:	429a      	cmp	r2, r3
     fec:	d003      	beq.n	ff6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     fee:	4b19      	ldr	r3, [pc, #100]	; (1054 <Reset_Handler+0x70>)
     ff0:	4a16      	ldr	r2, [pc, #88]	; (104c <Reset_Handler+0x68>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d304      	bcc.n	1000 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     ff6:	4b18      	ldr	r3, [pc, #96]	; (1058 <Reset_Handler+0x74>)
     ff8:	4a18      	ldr	r2, [pc, #96]	; (105c <Reset_Handler+0x78>)
     ffa:	429a      	cmp	r2, r3
     ffc:	d310      	bcc.n	1020 <Reset_Handler+0x3c>
     ffe:	e01b      	b.n	1038 <Reset_Handler+0x54>
    1000:	4b17      	ldr	r3, [pc, #92]	; (1060 <Reset_Handler+0x7c>)
    1002:	4814      	ldr	r0, [pc, #80]	; (1054 <Reset_Handler+0x70>)
    1004:	3003      	adds	r0, #3
    1006:	1ac0      	subs	r0, r0, r3
    1008:	0880      	lsrs	r0, r0, #2
    100a:	3001      	adds	r0, #1
    100c:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    100e:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1010:	490e      	ldr	r1, [pc, #56]	; (104c <Reset_Handler+0x68>)
    1012:	4a0f      	ldr	r2, [pc, #60]	; (1050 <Reset_Handler+0x6c>)
    1014:	58d4      	ldr	r4, [r2, r3]
    1016:	50cc      	str	r4, [r1, r3]
    1018:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    101a:	4283      	cmp	r3, r0
    101c:	d1fa      	bne.n	1014 <Reset_Handler+0x30>
    101e:	e7ea      	b.n	ff6 <Reset_Handler+0x12>
    1020:	4b0e      	ldr	r3, [pc, #56]	; (105c <Reset_Handler+0x78>)
    1022:	1d1a      	adds	r2, r3, #4
    1024:	490c      	ldr	r1, [pc, #48]	; (1058 <Reset_Handler+0x74>)
    1026:	3103      	adds	r1, #3
    1028:	1a89      	subs	r1, r1, r2
    102a:	0889      	lsrs	r1, r1, #2
    102c:	0089      	lsls	r1, r1, #2
    102e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1030:	2100      	movs	r1, #0
    1032:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1034:	4293      	cmp	r3, r2
    1036:	d1fc      	bne.n	1032 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1038:	4b0a      	ldr	r3, [pc, #40]	; (1064 <Reset_Handler+0x80>)
    103a:	217f      	movs	r1, #127	; 0x7f
    103c:	4a0a      	ldr	r2, [pc, #40]	; (1068 <Reset_Handler+0x84>)
    103e:	438a      	bics	r2, r1
    1040:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1042:	4b0a      	ldr	r3, [pc, #40]	; (106c <Reset_Handler+0x88>)
    1044:	4798      	blx	r3

        /* Branch to main function */
        main();
    1046:	4b0a      	ldr	r3, [pc, #40]	; (1070 <Reset_Handler+0x8c>)
    1048:	4798      	blx	r3
    104a:	e7fe      	b.n	104a <Reset_Handler+0x66>
    104c:	20000000 	.word	0x20000000
    1050:	00001d20 	.word	0x00001d20
    1054:	20000438 	.word	0x20000438
    1058:	200004f8 	.word	0x200004f8
    105c:	20000438 	.word	0x20000438
    1060:	20000004 	.word	0x20000004
    1064:	e000ed00 	.word	0xe000ed00
    1068:	00000000 	.word	0x00000000
    106c:	00001b69 	.word	0x00001b69
    1070:	000011a9 	.word	0x000011a9

00001074 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	01d2      	lsls	r2, r2, #7
    1078:	4b01      	ldr	r3, [pc, #4]	; (1080 <usart_write_callback+0xc>)
    107a:	61da      	str	r2, [r3, #28]
}

void usart_write_callback(const struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	41004400 	.word	0x41004400

00001084 <usart_read_callback>:
/************************************************************************/
/* Subroutines                                                          */
/************************************************************************/

void usart_read_callback(const struct usart_module *const usart_module)
{
    1084:	b508      	push	{r3, lr}
	usart_write_buffer_job(&usart_instance,
    1086:	4803      	ldr	r0, [pc, #12]	; (1094 <usart_read_callback+0x10>)
    1088:	4903      	ldr	r1, [pc, #12]	; (1098 <usart_read_callback+0x14>)
    108a:	2205      	movs	r2, #5
    108c:	4b03      	ldr	r3, [pc, #12]	; (109c <usart_read_callback+0x18>)
    108e:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
    1090:	bd08      	pop	{r3, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	200004cc 	.word	0x200004cc
    1098:	200004f0 	.word	0x200004f0
    109c:	0000074d 	.word	0x0000074d

000010a0 <enable_tc_clocks>:
/************************************************************************/
/* INIT Clocks                                                          */
/************************************************************************/

void enable_tc_clocks(void)
{
    10a0:	b500      	push	{lr}
    10a2:	b083      	sub	sp, #12
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    10a4:	4b08      	ldr	r3, [pc, #32]	; (10c8 <enable_tc_clocks+0x28>)
    10a6:	6a19      	ldr	r1, [r3, #32]
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	0112      	lsls	r2, r2, #4
    10ac:	430a      	orrs	r2, r1
    10ae:	621a      	str	r2, [r3, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    10b0:	a901      	add	r1, sp, #4
    10b2:	2300      	movs	r3, #0
    10b4:	700b      	strb	r3, [r1, #0]
	/* Set up the GCLK for the module */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	
	//Setup generic clock 0 (also the clock for MCU (running at 8 Mhz) as source for the timer clock)
	gclk_chan_conf.source_generator = GCLK_GENERATOR_0;
	system_gclk_chan_set_config(TC3_GCLK_ID, &gclk_chan_conf);
    10b6:	2014      	movs	r0, #20
    10b8:	4b04      	ldr	r3, [pc, #16]	; (10cc <enable_tc_clocks+0x2c>)
    10ba:	4798      	blx	r3
	
	//Enable the generic clock for the Timer/ Counter block
	system_gclk_chan_enable(TC3_GCLK_ID);
    10bc:	2014      	movs	r0, #20
    10be:	4b04      	ldr	r3, [pc, #16]	; (10d0 <enable_tc_clocks+0x30>)
    10c0:	4798      	blx	r3
}
    10c2:	b003      	add	sp, #12
    10c4:	bd00      	pop	{pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	40000400 	.word	0x40000400
    10cc:	00000ead 	.word	0x00000ead
    10d0:	00000e1d 	.word	0x00000e1d

000010d4 <configure_usart>:
/************************************************************************/
/* INIT USART                                                           */
/************************************************************************/

void configure_usart(void)
{
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    10d8:	2380      	movs	r3, #128	; 0x80
    10da:	05db      	lsls	r3, r3, #23
    10dc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    10de:	2300      	movs	r3, #0
    10e0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    10e2:	22ff      	movs	r2, #255	; 0xff
    10e4:	4669      	mov	r1, sp
    10e6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    10e8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    10ea:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    10ec:	2201      	movs	r2, #1
    10ee:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    10f0:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    10f2:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    10f4:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    10f6:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    10f8:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    10fa:	774b      	strb	r3, [r1, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    10fc:	23e1      	movs	r3, #225	; 0xe1
    10fe:	025b      	lsls	r3, r3, #9
    1100:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1102:	23c4      	movs	r3, #196	; 0xc4
    1104:	039b      	lsls	r3, r3, #14
    1106:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1108:	2301      	movs	r3, #1
    110a:	425b      	negs	r3, r3
    110c:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    110e:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1110:	4b11      	ldr	r3, [pc, #68]	; (1158 <configure_usart+0x84>)
    1112:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1114:	4b11      	ldr	r3, [pc, #68]	; (115c <configure_usart+0x88>)
    1116:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance,
    1118:	4e11      	ldr	r6, [pc, #68]	; (1160 <configure_usart+0x8c>)
    111a:	4d12      	ldr	r5, [pc, #72]	; (1164 <configure_usart+0x90>)
    111c:	4c12      	ldr	r4, [pc, #72]	; (1168 <configure_usart+0x94>)
    111e:	1c30      	adds	r0, r6, #0
    1120:	1c29      	adds	r1, r5, #0
    1122:	466a      	mov	r2, sp
    1124:	47a0      	blx	r4
    1126:	2800      	cmp	r0, #0
    1128:	d1f9      	bne.n	111e <configure_usart+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    112a:	4d0d      	ldr	r5, [pc, #52]	; (1160 <configure_usart+0x8c>)
    112c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    112e:	1c20      	adds	r0, r4, #0
    1130:	4b0e      	ldr	r3, [pc, #56]	; (116c <configure_usart+0x98>)
    1132:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1134:	231f      	movs	r3, #31
    1136:	4018      	ands	r0, r3
    1138:	2301      	movs	r3, #1
    113a:	4083      	lsls	r3, r0
    113c:	1c18      	adds	r0, r3, #0
    113e:	4b0c      	ldr	r3, [pc, #48]	; (1170 <configure_usart+0x9c>)
    1140:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1142:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1144:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1146:	0419      	lsls	r1, r3, #16
    1148:	d4fc      	bmi.n	1144 <configure_usart+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    114a:	6822      	ldr	r2, [r4, #0]
    114c:	2302      	movs	r3, #2
    114e:	4313      	orrs	r3, r2
    1150:	6023      	str	r3, [r4, #0]
	EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    1152:	b00c      	add	sp, #48	; 0x30
    1154:	bd70      	pop	{r4, r5, r6, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	00180002 	.word	0x00180002
    115c:	00190002 	.word	0x00190002
    1160:	200004cc 	.word	0x200004cc
    1164:	42001400 	.word	0x42001400
    1168:	000004fd 	.word	0x000004fd
    116c:	00000961 	.word	0x00000961
    1170:	e000e100 	.word	0xe000e100

00001174 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    1174:	b538      	push	{r3, r4, r5, lr}
	usart_register_callback(&usart_instance,
    1176:	4c08      	ldr	r4, [pc, #32]	; (1198 <configure_usart_callbacks+0x24>)
    1178:	1c20      	adds	r0, r4, #0
    117a:	4908      	ldr	r1, [pc, #32]	; (119c <configure_usart_callbacks+0x28>)
    117c:	2200      	movs	r2, #0
    117e:	4d08      	ldr	r5, [pc, #32]	; (11a0 <configure_usart_callbacks+0x2c>)
    1180:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    1182:	1c20      	adds	r0, r4, #0
    1184:	4907      	ldr	r1, [pc, #28]	; (11a4 <configure_usart_callbacks+0x30>)
    1186:	2201      	movs	r2, #1
    1188:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    118a:	2321      	movs	r3, #33	; 0x21
    118c:	5ce1      	ldrb	r1, [r4, r3]
    118e:	2203      	movs	r2, #3
    1190:	430a      	orrs	r2, r1
    1192:	54e2      	strb	r2, [r4, r3]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    1194:	bd38      	pop	{r3, r4, r5, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	200004cc 	.word	0x200004cc
    119c:	00001075 	.word	0x00001075
    11a0:	00000735 	.word	0x00000735
    11a4:	00001085 	.word	0x00001085

000011a8 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main (void)
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	b084      	sub	sp, #16
	system_init();
    11ac:	4b12      	ldr	r3, [pc, #72]	; (11f8 <main+0x50>)
    11ae:	4798      	blx	r3
	system_clock_init();
    11b0:	4b12      	ldr	r3, [pc, #72]	; (11fc <main+0x54>)
    11b2:	4798      	blx	r3
	
	enable_tc_clocks();
    11b4:	4b12      	ldr	r3, [pc, #72]	; (1200 <main+0x58>)
    11b6:	4798      	blx	r3
	configure_usart();
    11b8:	4b12      	ldr	r3, [pc, #72]	; (1204 <main+0x5c>)
    11ba:	4798      	blx	r3
	configure_usart_callbacks();
    11bc:	4b12      	ldr	r3, [pc, #72]	; (1208 <main+0x60>)
    11be:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    11c0:	2201      	movs	r2, #1
    11c2:	4b12      	ldr	r3, [pc, #72]	; (120c <main+0x64>)
    11c4:	701a      	strb	r2, [r3, #0]
    11c6:	f3bf 8f5f 	dmb	sy
    11ca:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	 uint8_t string[] = "Hello World!\r\n";
    11cc:	4669      	mov	r1, sp
    11ce:	4b10      	ldr	r3, [pc, #64]	; (1210 <main+0x68>)
    11d0:	466a      	mov	r2, sp
    11d2:	cb31      	ldmia	r3!, {r0, r4, r5}
    11d4:	c231      	stmia	r2!, {r0, r4, r5}
    11d6:	8818      	ldrh	r0, [r3, #0]
    11d8:	8010      	strh	r0, [r2, #0]
    11da:	789b      	ldrb	r3, [r3, #2]
    11dc:	7093      	strb	r3, [r2, #2]
	 usart_write_buffer_job(&usart_instance, string, sizeof(string));
    11de:	480d      	ldr	r0, [pc, #52]	; (1214 <main+0x6c>)
    11e0:	220f      	movs	r2, #15
    11e2:	4b0d      	ldr	r3, [pc, #52]	; (1218 <main+0x70>)
    11e4:	4798      	blx	r3

	while (1) 
	{
		 usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    11e6:	4e0b      	ldr	r6, [pc, #44]	; (1214 <main+0x6c>)
    11e8:	4d0c      	ldr	r5, [pc, #48]	; (121c <main+0x74>)
    11ea:	4c0d      	ldr	r4, [pc, #52]	; (1220 <main+0x78>)
    11ec:	1c30      	adds	r0, r6, #0
    11ee:	1c29      	adds	r1, r5, #0
    11f0:	2205      	movs	r2, #5
    11f2:	47a0      	blx	r4
    11f4:	e7fa      	b.n	11ec <main+0x44>
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	00000fbd 	.word	0x00000fbd
    11fc:	00000c09 	.word	0x00000c09
    1200:	000010a1 	.word	0x000010a1
    1204:	000010d5 	.word	0x000010d5
    1208:	00001175 	.word	0x00001175
    120c:	20000000 	.word	0x20000000
    1210:	00001cdc 	.word	0x00001cdc
    1214:	200004cc 	.word	0x200004cc
    1218:	0000074d 	.word	0x0000074d
    121c:	200004f0 	.word	0x200004f0
    1220:	0000077d 	.word	0x0000077d

00001224 <SysTick_Handler>:
/* remember to call SysTick_Config(uint32_t)							*/
/************************************************************************/ 
 						
void SysTick_Handler(void)
{
	sys_timer1++;
    1224:	4b02      	ldr	r3, [pc, #8]	; (1230 <SysTick_Handler+0xc>)
    1226:	681a      	ldr	r2, [r3, #0]
    1228:	3201      	adds	r2, #1
    122a:	601a      	str	r2, [r3, #0]
}
    122c:	4770      	bx	lr
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	20000490 	.word	0x20000490

00001234 <__aeabi_uidiv>:
    1234:	2900      	cmp	r1, #0
    1236:	d034      	beq.n	12a2 <.udivsi3_skip_div0_test+0x6a>

00001238 <.udivsi3_skip_div0_test>:
    1238:	2301      	movs	r3, #1
    123a:	2200      	movs	r2, #0
    123c:	b410      	push	{r4}
    123e:	4288      	cmp	r0, r1
    1240:	d32c      	bcc.n	129c <.udivsi3_skip_div0_test+0x64>
    1242:	2401      	movs	r4, #1
    1244:	0724      	lsls	r4, r4, #28
    1246:	42a1      	cmp	r1, r4
    1248:	d204      	bcs.n	1254 <.udivsi3_skip_div0_test+0x1c>
    124a:	4281      	cmp	r1, r0
    124c:	d202      	bcs.n	1254 <.udivsi3_skip_div0_test+0x1c>
    124e:	0109      	lsls	r1, r1, #4
    1250:	011b      	lsls	r3, r3, #4
    1252:	e7f8      	b.n	1246 <.udivsi3_skip_div0_test+0xe>
    1254:	00e4      	lsls	r4, r4, #3
    1256:	42a1      	cmp	r1, r4
    1258:	d204      	bcs.n	1264 <.udivsi3_skip_div0_test+0x2c>
    125a:	4281      	cmp	r1, r0
    125c:	d202      	bcs.n	1264 <.udivsi3_skip_div0_test+0x2c>
    125e:	0049      	lsls	r1, r1, #1
    1260:	005b      	lsls	r3, r3, #1
    1262:	e7f8      	b.n	1256 <.udivsi3_skip_div0_test+0x1e>
    1264:	4288      	cmp	r0, r1
    1266:	d301      	bcc.n	126c <.udivsi3_skip_div0_test+0x34>
    1268:	1a40      	subs	r0, r0, r1
    126a:	431a      	orrs	r2, r3
    126c:	084c      	lsrs	r4, r1, #1
    126e:	42a0      	cmp	r0, r4
    1270:	d302      	bcc.n	1278 <.udivsi3_skip_div0_test+0x40>
    1272:	1b00      	subs	r0, r0, r4
    1274:	085c      	lsrs	r4, r3, #1
    1276:	4322      	orrs	r2, r4
    1278:	088c      	lsrs	r4, r1, #2
    127a:	42a0      	cmp	r0, r4
    127c:	d302      	bcc.n	1284 <.udivsi3_skip_div0_test+0x4c>
    127e:	1b00      	subs	r0, r0, r4
    1280:	089c      	lsrs	r4, r3, #2
    1282:	4322      	orrs	r2, r4
    1284:	08cc      	lsrs	r4, r1, #3
    1286:	42a0      	cmp	r0, r4
    1288:	d302      	bcc.n	1290 <.udivsi3_skip_div0_test+0x58>
    128a:	1b00      	subs	r0, r0, r4
    128c:	08dc      	lsrs	r4, r3, #3
    128e:	4322      	orrs	r2, r4
    1290:	2800      	cmp	r0, #0
    1292:	d003      	beq.n	129c <.udivsi3_skip_div0_test+0x64>
    1294:	091b      	lsrs	r3, r3, #4
    1296:	d001      	beq.n	129c <.udivsi3_skip_div0_test+0x64>
    1298:	0909      	lsrs	r1, r1, #4
    129a:	e7e3      	b.n	1264 <.udivsi3_skip_div0_test+0x2c>
    129c:	1c10      	adds	r0, r2, #0
    129e:	bc10      	pop	{r4}
    12a0:	4770      	bx	lr
    12a2:	2800      	cmp	r0, #0
    12a4:	d001      	beq.n	12aa <.udivsi3_skip_div0_test+0x72>
    12a6:	2000      	movs	r0, #0
    12a8:	43c0      	mvns	r0, r0
    12aa:	b407      	push	{r0, r1, r2}
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <.udivsi3_skip_div0_test+0x80>)
    12ae:	a102      	add	r1, pc, #8	; (adr r1, 12b8 <.udivsi3_skip_div0_test+0x80>)
    12b0:	1840      	adds	r0, r0, r1
    12b2:	9002      	str	r0, [sp, #8]
    12b4:	bd03      	pop	{r0, r1, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	00000019 	.word	0x00000019

000012bc <__aeabi_uidivmod>:
    12bc:	2900      	cmp	r1, #0
    12be:	d0f0      	beq.n	12a2 <.udivsi3_skip_div0_test+0x6a>
    12c0:	b503      	push	{r0, r1, lr}
    12c2:	f7ff ffb9 	bl	1238 <.udivsi3_skip_div0_test>
    12c6:	bc0e      	pop	{r1, r2, r3}
    12c8:	4342      	muls	r2, r0
    12ca:	1a89      	subs	r1, r1, r2
    12cc:	4718      	bx	r3
    12ce:	46c0      	nop			; (mov r8, r8)

000012d0 <__aeabi_idiv0>:
    12d0:	4770      	bx	lr
    12d2:	46c0      	nop			; (mov r8, r8)

000012d4 <__aeabi_uldivmod>:
    12d4:	2b00      	cmp	r3, #0
    12d6:	d111      	bne.n	12fc <__aeabi_uldivmod+0x28>
    12d8:	2a00      	cmp	r2, #0
    12da:	d10f      	bne.n	12fc <__aeabi_uldivmod+0x28>
    12dc:	2900      	cmp	r1, #0
    12de:	d100      	bne.n	12e2 <__aeabi_uldivmod+0xe>
    12e0:	2800      	cmp	r0, #0
    12e2:	d002      	beq.n	12ea <__aeabi_uldivmod+0x16>
    12e4:	2100      	movs	r1, #0
    12e6:	43c9      	mvns	r1, r1
    12e8:	1c08      	adds	r0, r1, #0
    12ea:	b407      	push	{r0, r1, r2}
    12ec:	4802      	ldr	r0, [pc, #8]	; (12f8 <__aeabi_uldivmod+0x24>)
    12ee:	a102      	add	r1, pc, #8	; (adr r1, 12f8 <__aeabi_uldivmod+0x24>)
    12f0:	1840      	adds	r0, r0, r1
    12f2:	9002      	str	r0, [sp, #8]
    12f4:	bd03      	pop	{r0, r1, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	ffffffd9 	.word	0xffffffd9
    12fc:	b403      	push	{r0, r1}
    12fe:	4668      	mov	r0, sp
    1300:	b501      	push	{r0, lr}
    1302:	9802      	ldr	r0, [sp, #8]
    1304:	f000 f844 	bl	1390 <__gnu_uldivmod_helper>
    1308:	9b01      	ldr	r3, [sp, #4]
    130a:	469e      	mov	lr, r3
    130c:	b002      	add	sp, #8
    130e:	bc0c      	pop	{r2, r3}
    1310:	4770      	bx	lr
    1312:	46c0      	nop			; (mov r8, r8)

00001314 <__aeabi_lmul>:
    1314:	469c      	mov	ip, r3
    1316:	0403      	lsls	r3, r0, #16
    1318:	b5f0      	push	{r4, r5, r6, r7, lr}
    131a:	0c1b      	lsrs	r3, r3, #16
    131c:	0417      	lsls	r7, r2, #16
    131e:	0c3f      	lsrs	r7, r7, #16
    1320:	0c15      	lsrs	r5, r2, #16
    1322:	1c1e      	adds	r6, r3, #0
    1324:	1c04      	adds	r4, r0, #0
    1326:	0c00      	lsrs	r0, r0, #16
    1328:	437e      	muls	r6, r7
    132a:	436b      	muls	r3, r5
    132c:	4347      	muls	r7, r0
    132e:	4345      	muls	r5, r0
    1330:	18fb      	adds	r3, r7, r3
    1332:	0c30      	lsrs	r0, r6, #16
    1334:	1818      	adds	r0, r3, r0
    1336:	4287      	cmp	r7, r0
    1338:	d902      	bls.n	1340 <__aeabi_lmul+0x2c>
    133a:	2380      	movs	r3, #128	; 0x80
    133c:	025b      	lsls	r3, r3, #9
    133e:	18ed      	adds	r5, r5, r3
    1340:	0c03      	lsrs	r3, r0, #16
    1342:	18ed      	adds	r5, r5, r3
    1344:	4663      	mov	r3, ip
    1346:	435c      	muls	r4, r3
    1348:	434a      	muls	r2, r1
    134a:	0436      	lsls	r6, r6, #16
    134c:	0c36      	lsrs	r6, r6, #16
    134e:	18a1      	adds	r1, r4, r2
    1350:	0400      	lsls	r0, r0, #16
    1352:	1980      	adds	r0, r0, r6
    1354:	1949      	adds	r1, r1, r5
    1356:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001358 <__gnu_ldivmod_helper>:
    1358:	b5f0      	push	{r4, r5, r6, r7, lr}
    135a:	b083      	sub	sp, #12
    135c:	1c16      	adds	r6, r2, #0
    135e:	1c1f      	adds	r7, r3, #0
    1360:	9000      	str	r0, [sp, #0]
    1362:	9101      	str	r1, [sp, #4]
    1364:	f000 f82e 	bl	13c4 <__divdi3>
    1368:	1c04      	adds	r4, r0, #0
    136a:	1c0d      	adds	r5, r1, #0
    136c:	1c22      	adds	r2, r4, #0
    136e:	1c2b      	adds	r3, r5, #0
    1370:	1c30      	adds	r0, r6, #0
    1372:	1c39      	adds	r1, r7, #0
    1374:	f7ff ffce 	bl	1314 <__aeabi_lmul>
    1378:	9a00      	ldr	r2, [sp, #0]
    137a:	9b01      	ldr	r3, [sp, #4]
    137c:	1a12      	subs	r2, r2, r0
    137e:	418b      	sbcs	r3, r1
    1380:	9908      	ldr	r1, [sp, #32]
    1382:	1c20      	adds	r0, r4, #0
    1384:	600a      	str	r2, [r1, #0]
    1386:	604b      	str	r3, [r1, #4]
    1388:	1c29      	adds	r1, r5, #0
    138a:	b003      	add	sp, #12
    138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)

00001390 <__gnu_uldivmod_helper>:
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	b083      	sub	sp, #12
    1394:	1c14      	adds	r4, r2, #0
    1396:	1c1d      	adds	r5, r3, #0
    1398:	9000      	str	r0, [sp, #0]
    139a:	9101      	str	r1, [sp, #4]
    139c:	f000 f9ea 	bl	1774 <__udivdi3>
    13a0:	1c22      	adds	r2, r4, #0
    13a2:	1c2b      	adds	r3, r5, #0
    13a4:	1c06      	adds	r6, r0, #0
    13a6:	1c0f      	adds	r7, r1, #0
    13a8:	f7ff ffb4 	bl	1314 <__aeabi_lmul>
    13ac:	9a00      	ldr	r2, [sp, #0]
    13ae:	9b01      	ldr	r3, [sp, #4]
    13b0:	1a12      	subs	r2, r2, r0
    13b2:	418b      	sbcs	r3, r1
    13b4:	9908      	ldr	r1, [sp, #32]
    13b6:	1c30      	adds	r0, r6, #0
    13b8:	600a      	str	r2, [r1, #0]
    13ba:	604b      	str	r3, [r1, #4]
    13bc:	1c39      	adds	r1, r7, #0
    13be:	b003      	add	sp, #12
    13c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)

000013c4 <__divdi3>:
    13c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13c6:	4644      	mov	r4, r8
    13c8:	465f      	mov	r7, fp
    13ca:	4656      	mov	r6, sl
    13cc:	464d      	mov	r5, r9
    13ce:	b4f0      	push	{r4, r5, r6, r7}
    13d0:	1c1c      	adds	r4, r3, #0
    13d2:	b085      	sub	sp, #20
    13d4:	2900      	cmp	r1, #0
    13d6:	da00      	bge.n	13da <__divdi3+0x16>
    13d8:	e0d9      	b.n	158e <__divdi3+0x1ca>
    13da:	1c0f      	adds	r7, r1, #0
    13dc:	2100      	movs	r1, #0
    13de:	1c06      	adds	r6, r0, #0
    13e0:	468a      	mov	sl, r1
    13e2:	1c10      	adds	r0, r2, #0
    13e4:	1c19      	adds	r1, r3, #0
    13e6:	2c00      	cmp	r4, #0
    13e8:	da00      	bge.n	13ec <__divdi3+0x28>
    13ea:	e0c7      	b.n	157c <__divdi3+0x1b8>
    13ec:	9601      	str	r6, [sp, #4]
    13ee:	9000      	str	r0, [sp, #0]
    13f0:	4689      	mov	r9, r1
    13f2:	4680      	mov	r8, r0
    13f4:	2900      	cmp	r1, #0
    13f6:	d150      	bne.n	149a <__divdi3+0xd6>
    13f8:	42b8      	cmp	r0, r7
    13fa:	d962      	bls.n	14c2 <__divdi3+0xfe>
    13fc:	f000 fb7a 	bl	1af4 <__clzsi2>
    1400:	2800      	cmp	r0, #0
    1402:	d009      	beq.n	1418 <__divdi3+0x54>
    1404:	2320      	movs	r3, #32
    1406:	4645      	mov	r5, r8
    1408:	1c31      	adds	r1, r6, #0
    140a:	1a1b      	subs	r3, r3, r0
    140c:	4085      	lsls	r5, r0
    140e:	4087      	lsls	r7, r0
    1410:	40d9      	lsrs	r1, r3
    1412:	46a8      	mov	r8, r5
    1414:	430f      	orrs	r7, r1
    1416:	4086      	lsls	r6, r0
    1418:	4642      	mov	r2, r8
    141a:	0c14      	lsrs	r4, r2, #16
    141c:	0413      	lsls	r3, r2, #16
    141e:	0c1b      	lsrs	r3, r3, #16
    1420:	1c21      	adds	r1, r4, #0
    1422:	1c38      	adds	r0, r7, #0
    1424:	469b      	mov	fp, r3
    1426:	f7ff ff05 	bl	1234 <__aeabi_uidiv>
    142a:	465b      	mov	r3, fp
    142c:	4343      	muls	r3, r0
    142e:	1c05      	adds	r5, r0, #0
    1430:	1c21      	adds	r1, r4, #0
    1432:	1c38      	adds	r0, r7, #0
    1434:	4699      	mov	r9, r3
    1436:	f7ff ff41 	bl	12bc <__aeabi_uidivmod>
    143a:	0c33      	lsrs	r3, r6, #16
    143c:	0408      	lsls	r0, r1, #16
    143e:	4318      	orrs	r0, r3
    1440:	4581      	cmp	r9, r0
    1442:	d909      	bls.n	1458 <__divdi3+0x94>
    1444:	4440      	add	r0, r8
    1446:	1e6b      	subs	r3, r5, #1
    1448:	4580      	cmp	r8, r0
    144a:	d900      	bls.n	144e <__divdi3+0x8a>
    144c:	e177      	b.n	173e <__divdi3+0x37a>
    144e:	4581      	cmp	r9, r0
    1450:	d800      	bhi.n	1454 <__divdi3+0x90>
    1452:	e174      	b.n	173e <__divdi3+0x37a>
    1454:	3d02      	subs	r5, #2
    1456:	4440      	add	r0, r8
    1458:	4649      	mov	r1, r9
    145a:	1a41      	subs	r1, r0, r1
    145c:	4689      	mov	r9, r1
    145e:	1c08      	adds	r0, r1, #0
    1460:	1c21      	adds	r1, r4, #0
    1462:	f7ff fee7 	bl	1234 <__aeabi_uidiv>
    1466:	465a      	mov	r2, fp
    1468:	4342      	muls	r2, r0
    146a:	1c07      	adds	r7, r0, #0
    146c:	1c21      	adds	r1, r4, #0
    146e:	4648      	mov	r0, r9
    1470:	4693      	mov	fp, r2
    1472:	f7ff ff23 	bl	12bc <__aeabi_uidivmod>
    1476:	0436      	lsls	r6, r6, #16
    1478:	0409      	lsls	r1, r1, #16
    147a:	0c36      	lsrs	r6, r6, #16
    147c:	430e      	orrs	r6, r1
    147e:	45b3      	cmp	fp, r6
    1480:	d907      	bls.n	1492 <__divdi3+0xce>
    1482:	4446      	add	r6, r8
    1484:	1e7b      	subs	r3, r7, #1
    1486:	45b0      	cmp	r8, r6
    1488:	d802      	bhi.n	1490 <__divdi3+0xcc>
    148a:	3f02      	subs	r7, #2
    148c:	45b3      	cmp	fp, r6
    148e:	d800      	bhi.n	1492 <__divdi3+0xce>
    1490:	1c1f      	adds	r7, r3, #0
    1492:	042d      	lsls	r5, r5, #16
    1494:	432f      	orrs	r7, r5
    1496:	2400      	movs	r4, #0
    1498:	e003      	b.n	14a2 <__divdi3+0xde>
    149a:	42b9      	cmp	r1, r7
    149c:	d960      	bls.n	1560 <__divdi3+0x19c>
    149e:	2400      	movs	r4, #0
    14a0:	2700      	movs	r7, #0
    14a2:	4652      	mov	r2, sl
    14a4:	1c38      	adds	r0, r7, #0
    14a6:	1c21      	adds	r1, r4, #0
    14a8:	2a00      	cmp	r2, #0
    14aa:	d003      	beq.n	14b4 <__divdi3+0xf0>
    14ac:	1c3b      	adds	r3, r7, #0
    14ae:	2100      	movs	r1, #0
    14b0:	4258      	negs	r0, r3
    14b2:	41a1      	sbcs	r1, r4
    14b4:	b005      	add	sp, #20
    14b6:	bc3c      	pop	{r2, r3, r4, r5}
    14b8:	4690      	mov	r8, r2
    14ba:	4699      	mov	r9, r3
    14bc:	46a2      	mov	sl, r4
    14be:	46ab      	mov	fp, r5
    14c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c2:	2800      	cmp	r0, #0
    14c4:	d104      	bne.n	14d0 <__divdi3+0x10c>
    14c6:	2001      	movs	r0, #1
    14c8:	2100      	movs	r1, #0
    14ca:	f7ff feb3 	bl	1234 <__aeabi_uidiv>
    14ce:	4680      	mov	r8, r0
    14d0:	4640      	mov	r0, r8
    14d2:	f000 fb0f 	bl	1af4 <__clzsi2>
    14d6:	2800      	cmp	r0, #0
    14d8:	d160      	bne.n	159c <__divdi3+0x1d8>
    14da:	4641      	mov	r1, r8
    14dc:	4644      	mov	r4, r8
    14de:	040b      	lsls	r3, r1, #16
    14e0:	1b3c      	subs	r4, r7, r4
    14e2:	0c1b      	lsrs	r3, r3, #16
    14e4:	46a3      	mov	fp, r4
    14e6:	0c0d      	lsrs	r5, r1, #16
    14e8:	9300      	str	r3, [sp, #0]
    14ea:	2401      	movs	r4, #1
    14ec:	1c29      	adds	r1, r5, #0
    14ee:	4658      	mov	r0, fp
    14f0:	f7ff fea0 	bl	1234 <__aeabi_uidiv>
    14f4:	9f00      	ldr	r7, [sp, #0]
    14f6:	4681      	mov	r9, r0
    14f8:	4347      	muls	r7, r0
    14fa:	1c29      	adds	r1, r5, #0
    14fc:	4658      	mov	r0, fp
    14fe:	f7ff fedd 	bl	12bc <__aeabi_uidivmod>
    1502:	0c33      	lsrs	r3, r6, #16
    1504:	0409      	lsls	r1, r1, #16
    1506:	4319      	orrs	r1, r3
    1508:	428f      	cmp	r7, r1
    150a:	d908      	bls.n	151e <__divdi3+0x15a>
    150c:	464b      	mov	r3, r9
    150e:	4441      	add	r1, r8
    1510:	3b01      	subs	r3, #1
    1512:	4588      	cmp	r8, r1
    1514:	d802      	bhi.n	151c <__divdi3+0x158>
    1516:	428f      	cmp	r7, r1
    1518:	d900      	bls.n	151c <__divdi3+0x158>
    151a:	e125      	b.n	1768 <__divdi3+0x3a4>
    151c:	4699      	mov	r9, r3
    151e:	1bc9      	subs	r1, r1, r7
    1520:	468b      	mov	fp, r1
    1522:	1c08      	adds	r0, r1, #0
    1524:	1c29      	adds	r1, r5, #0
    1526:	f7ff fe85 	bl	1234 <__aeabi_uidiv>
    152a:	9b00      	ldr	r3, [sp, #0]
    152c:	1c29      	adds	r1, r5, #0
    152e:	4343      	muls	r3, r0
    1530:	1c07      	adds	r7, r0, #0
    1532:	4658      	mov	r0, fp
    1534:	9300      	str	r3, [sp, #0]
    1536:	f7ff fec1 	bl	12bc <__aeabi_uidivmod>
    153a:	0436      	lsls	r6, r6, #16
    153c:	9d00      	ldr	r5, [sp, #0]
    153e:	0409      	lsls	r1, r1, #16
    1540:	0c36      	lsrs	r6, r6, #16
    1542:	430e      	orrs	r6, r1
    1544:	42b5      	cmp	r5, r6
    1546:	d907      	bls.n	1558 <__divdi3+0x194>
    1548:	4446      	add	r6, r8
    154a:	1e7b      	subs	r3, r7, #1
    154c:	45b0      	cmp	r8, r6
    154e:	d802      	bhi.n	1556 <__divdi3+0x192>
    1550:	3f02      	subs	r7, #2
    1552:	42b5      	cmp	r5, r6
    1554:	d800      	bhi.n	1558 <__divdi3+0x194>
    1556:	1c1f      	adds	r7, r3, #0
    1558:	4649      	mov	r1, r9
    155a:	040b      	lsls	r3, r1, #16
    155c:	431f      	orrs	r7, r3
    155e:	e7a0      	b.n	14a2 <__divdi3+0xde>
    1560:	1c08      	adds	r0, r1, #0
    1562:	f000 fac7 	bl	1af4 <__clzsi2>
    1566:	1e04      	subs	r4, r0, #0
    1568:	d170      	bne.n	164c <__divdi3+0x288>
    156a:	45b9      	cmp	r9, r7
    156c:	d303      	bcc.n	1576 <__divdi3+0x1b2>
    156e:	9c00      	ldr	r4, [sp, #0]
    1570:	9d01      	ldr	r5, [sp, #4]
    1572:	42ac      	cmp	r4, r5
    1574:	d893      	bhi.n	149e <__divdi3+0xda>
    1576:	2400      	movs	r4, #0
    1578:	2701      	movs	r7, #1
    157a:	e792      	b.n	14a2 <__divdi3+0xde>
    157c:	4652      	mov	r2, sl
    157e:	43d2      	mvns	r2, r2
    1580:	1c03      	adds	r3, r0, #0
    1582:	1c0c      	adds	r4, r1, #0
    1584:	4692      	mov	sl, r2
    1586:	2100      	movs	r1, #0
    1588:	4258      	negs	r0, r3
    158a:	41a1      	sbcs	r1, r4
    158c:	e72e      	b.n	13ec <__divdi3+0x28>
    158e:	2700      	movs	r7, #0
    1590:	4246      	negs	r6, r0
    1592:	418f      	sbcs	r7, r1
    1594:	2101      	movs	r1, #1
    1596:	4249      	negs	r1, r1
    1598:	468a      	mov	sl, r1
    159a:	e722      	b.n	13e2 <__divdi3+0x1e>
    159c:	2320      	movs	r3, #32
    159e:	1a1b      	subs	r3, r3, r0
    15a0:	4642      	mov	r2, r8
    15a2:	1c35      	adds	r5, r6, #0
    15a4:	4082      	lsls	r2, r0
    15a6:	1c3c      	adds	r4, r7, #0
    15a8:	40dd      	lsrs	r5, r3
    15aa:	40dc      	lsrs	r4, r3
    15ac:	4087      	lsls	r7, r0
    15ae:	1c2b      	adds	r3, r5, #0
    15b0:	0c15      	lsrs	r5, r2, #16
    15b2:	433b      	orrs	r3, r7
    15b4:	1c29      	adds	r1, r5, #0
    15b6:	4086      	lsls	r6, r0
    15b8:	1c20      	adds	r0, r4, #0
    15ba:	9300      	str	r3, [sp, #0]
    15bc:	0417      	lsls	r7, r2, #16
    15be:	4690      	mov	r8, r2
    15c0:	f7ff fe38 	bl	1234 <__aeabi_uidiv>
    15c4:	0c3f      	lsrs	r7, r7, #16
    15c6:	1c01      	adds	r1, r0, #0
    15c8:	4379      	muls	r1, r7
    15ca:	4681      	mov	r9, r0
    15cc:	468b      	mov	fp, r1
    15ce:	1c20      	adds	r0, r4, #0
    15d0:	1c29      	adds	r1, r5, #0
    15d2:	f7ff fe73 	bl	12bc <__aeabi_uidivmod>
    15d6:	9c00      	ldr	r4, [sp, #0]
    15d8:	0409      	lsls	r1, r1, #16
    15da:	0c23      	lsrs	r3, r4, #16
    15dc:	4319      	orrs	r1, r3
    15de:	458b      	cmp	fp, r1
    15e0:	d90c      	bls.n	15fc <__divdi3+0x238>
    15e2:	464b      	mov	r3, r9
    15e4:	4441      	add	r1, r8
    15e6:	3b01      	subs	r3, #1
    15e8:	4588      	cmp	r8, r1
    15ea:	d900      	bls.n	15ee <__divdi3+0x22a>
    15ec:	e0ba      	b.n	1764 <__divdi3+0x3a0>
    15ee:	458b      	cmp	fp, r1
    15f0:	d800      	bhi.n	15f4 <__divdi3+0x230>
    15f2:	e0b7      	b.n	1764 <__divdi3+0x3a0>
    15f4:	2202      	movs	r2, #2
    15f6:	4252      	negs	r2, r2
    15f8:	4491      	add	r9, r2
    15fa:	4441      	add	r1, r8
    15fc:	465c      	mov	r4, fp
    15fe:	1b0c      	subs	r4, r1, r4
    1600:	1c20      	adds	r0, r4, #0
    1602:	1c29      	adds	r1, r5, #0
    1604:	9401      	str	r4, [sp, #4]
    1606:	f7ff fe15 	bl	1234 <__aeabi_uidiv>
    160a:	1c39      	adds	r1, r7, #0
    160c:	4341      	muls	r1, r0
    160e:	1c04      	adds	r4, r0, #0
    1610:	468b      	mov	fp, r1
    1612:	9801      	ldr	r0, [sp, #4]
    1614:	1c29      	adds	r1, r5, #0
    1616:	f7ff fe51 	bl	12bc <__aeabi_uidivmod>
    161a:	9a00      	ldr	r2, [sp, #0]
    161c:	0409      	lsls	r1, r1, #16
    161e:	0413      	lsls	r3, r2, #16
    1620:	0c1b      	lsrs	r3, r3, #16
    1622:	4319      	orrs	r1, r3
    1624:	458b      	cmp	fp, r1
    1626:	d909      	bls.n	163c <__divdi3+0x278>
    1628:	4441      	add	r1, r8
    162a:	1e63      	subs	r3, r4, #1
    162c:	4588      	cmp	r8, r1
    162e:	d900      	bls.n	1632 <__divdi3+0x26e>
    1630:	e094      	b.n	175c <__divdi3+0x398>
    1632:	458b      	cmp	fp, r1
    1634:	d800      	bhi.n	1638 <__divdi3+0x274>
    1636:	e091      	b.n	175c <__divdi3+0x398>
    1638:	3c02      	subs	r4, #2
    163a:	4441      	add	r1, r8
    163c:	465b      	mov	r3, fp
    163e:	1acb      	subs	r3, r1, r3
    1640:	4649      	mov	r1, r9
    1642:	469b      	mov	fp, r3
    1644:	040b      	lsls	r3, r1, #16
    1646:	431c      	orrs	r4, r3
    1648:	9700      	str	r7, [sp, #0]
    164a:	e74f      	b.n	14ec <__divdi3+0x128>
    164c:	9d00      	ldr	r5, [sp, #0]
    164e:	2320      	movs	r3, #32
    1650:	1a1b      	subs	r3, r3, r0
    1652:	464a      	mov	r2, r9
    1654:	9900      	ldr	r1, [sp, #0]
    1656:	4082      	lsls	r2, r0
    1658:	40dd      	lsrs	r5, r3
    165a:	4315      	orrs	r5, r2
    165c:	4081      	lsls	r1, r0
    165e:	1c3a      	adds	r2, r7, #0
    1660:	40da      	lsrs	r2, r3
    1662:	9100      	str	r1, [sp, #0]
    1664:	1c31      	adds	r1, r6, #0
    1666:	4690      	mov	r8, r2
    1668:	40d9      	lsrs	r1, r3
    166a:	1c3a      	adds	r2, r7, #0
    166c:	4082      	lsls	r2, r0
    166e:	1c0b      	adds	r3, r1, #0
    1670:	4313      	orrs	r3, r2
    1672:	9301      	str	r3, [sp, #4]
    1674:	0c2f      	lsrs	r7, r5, #16
    1676:	042b      	lsls	r3, r5, #16
    1678:	0c1b      	lsrs	r3, r3, #16
    167a:	1c39      	adds	r1, r7, #0
    167c:	4640      	mov	r0, r8
    167e:	9302      	str	r3, [sp, #8]
    1680:	f7ff fdd8 	bl	1234 <__aeabi_uidiv>
    1684:	9a02      	ldr	r2, [sp, #8]
    1686:	4681      	mov	r9, r0
    1688:	4342      	muls	r2, r0
    168a:	1c39      	adds	r1, r7, #0
    168c:	4640      	mov	r0, r8
    168e:	4693      	mov	fp, r2
    1690:	f7ff fe14 	bl	12bc <__aeabi_uidivmod>
    1694:	9a01      	ldr	r2, [sp, #4]
    1696:	0409      	lsls	r1, r1, #16
    1698:	0c13      	lsrs	r3, r2, #16
    169a:	4319      	orrs	r1, r3
    169c:	458b      	cmp	fp, r1
    169e:	d90a      	bls.n	16b6 <__divdi3+0x2f2>
    16a0:	464b      	mov	r3, r9
    16a2:	1949      	adds	r1, r1, r5
    16a4:	3b01      	subs	r3, #1
    16a6:	428d      	cmp	r5, r1
    16a8:	d85a      	bhi.n	1760 <__divdi3+0x39c>
    16aa:	458b      	cmp	fp, r1
    16ac:	d958      	bls.n	1760 <__divdi3+0x39c>
    16ae:	2302      	movs	r3, #2
    16b0:	425b      	negs	r3, r3
    16b2:	4499      	add	r9, r3
    16b4:	1949      	adds	r1, r1, r5
    16b6:	465a      	mov	r2, fp
    16b8:	1a8a      	subs	r2, r1, r2
    16ba:	1c10      	adds	r0, r2, #0
    16bc:	1c39      	adds	r1, r7, #0
    16be:	9203      	str	r2, [sp, #12]
    16c0:	f7ff fdb8 	bl	1234 <__aeabi_uidiv>
    16c4:	9b02      	ldr	r3, [sp, #8]
    16c6:	4680      	mov	r8, r0
    16c8:	4343      	muls	r3, r0
    16ca:	1c39      	adds	r1, r7, #0
    16cc:	9803      	ldr	r0, [sp, #12]
    16ce:	469b      	mov	fp, r3
    16d0:	f7ff fdf4 	bl	12bc <__aeabi_uidivmod>
    16d4:	9a01      	ldr	r2, [sp, #4]
    16d6:	0409      	lsls	r1, r1, #16
    16d8:	0413      	lsls	r3, r2, #16
    16da:	0c1b      	lsrs	r3, r3, #16
    16dc:	4319      	orrs	r1, r3
    16de:	458b      	cmp	fp, r1
    16e0:	d90a      	bls.n	16f8 <__divdi3+0x334>
    16e2:	4643      	mov	r3, r8
    16e4:	1949      	adds	r1, r1, r5
    16e6:	3b01      	subs	r3, #1
    16e8:	428d      	cmp	r5, r1
    16ea:	d835      	bhi.n	1758 <__divdi3+0x394>
    16ec:	458b      	cmp	fp, r1
    16ee:	d933      	bls.n	1758 <__divdi3+0x394>
    16f0:	2302      	movs	r3, #2
    16f2:	425b      	negs	r3, r3
    16f4:	4498      	add	r8, r3
    16f6:	1949      	adds	r1, r1, r5
    16f8:	465d      	mov	r5, fp
    16fa:	1b4d      	subs	r5, r1, r5
    16fc:	46ab      	mov	fp, r5
    16fe:	4649      	mov	r1, r9
    1700:	9d00      	ldr	r5, [sp, #0]
    1702:	040f      	lsls	r7, r1, #16
    1704:	4642      	mov	r2, r8
    1706:	4317      	orrs	r7, r2
    1708:	042a      	lsls	r2, r5, #16
    170a:	0c12      	lsrs	r2, r2, #16
    170c:	043b      	lsls	r3, r7, #16
    170e:	0c2d      	lsrs	r5, r5, #16
    1710:	0c1b      	lsrs	r3, r3, #16
    1712:	0c38      	lsrs	r0, r7, #16
    1714:	1c11      	adds	r1, r2, #0
    1716:	4359      	muls	r1, r3
    1718:	4342      	muls	r2, r0
    171a:	436b      	muls	r3, r5
    171c:	4368      	muls	r0, r5
    171e:	18d3      	adds	r3, r2, r3
    1720:	0c0d      	lsrs	r5, r1, #16
    1722:	195b      	adds	r3, r3, r5
    1724:	468c      	mov	ip, r1
    1726:	429a      	cmp	r2, r3
    1728:	d902      	bls.n	1730 <__divdi3+0x36c>
    172a:	2280      	movs	r2, #128	; 0x80
    172c:	0252      	lsls	r2, r2, #9
    172e:	1880      	adds	r0, r0, r2
    1730:	0c1d      	lsrs	r5, r3, #16
    1732:	1940      	adds	r0, r0, r5
    1734:	4583      	cmp	fp, r0
    1736:	d30c      	bcc.n	1752 <__divdi3+0x38e>
    1738:	d003      	beq.n	1742 <__divdi3+0x37e>
    173a:	2400      	movs	r4, #0
    173c:	e6b1      	b.n	14a2 <__divdi3+0xde>
    173e:	1c1d      	adds	r5, r3, #0
    1740:	e68a      	b.n	1458 <__divdi3+0x94>
    1742:	4665      	mov	r5, ip
    1744:	042a      	lsls	r2, r5, #16
    1746:	041b      	lsls	r3, r3, #16
    1748:	0c12      	lsrs	r2, r2, #16
    174a:	189b      	adds	r3, r3, r2
    174c:	40a6      	lsls	r6, r4
    174e:	429e      	cmp	r6, r3
    1750:	d2f3      	bcs.n	173a <__divdi3+0x376>
    1752:	3f01      	subs	r7, #1
    1754:	2400      	movs	r4, #0
    1756:	e6a4      	b.n	14a2 <__divdi3+0xde>
    1758:	4698      	mov	r8, r3
    175a:	e7cd      	b.n	16f8 <__divdi3+0x334>
    175c:	1c1c      	adds	r4, r3, #0
    175e:	e76d      	b.n	163c <__divdi3+0x278>
    1760:	4699      	mov	r9, r3
    1762:	e7a8      	b.n	16b6 <__divdi3+0x2f2>
    1764:	4699      	mov	r9, r3
    1766:	e749      	b.n	15fc <__divdi3+0x238>
    1768:	2202      	movs	r2, #2
    176a:	4252      	negs	r2, r2
    176c:	4491      	add	r9, r2
    176e:	4441      	add	r1, r8
    1770:	e6d5      	b.n	151e <__divdi3+0x15a>
    1772:	46c0      	nop			; (mov r8, r8)

00001774 <__udivdi3>:
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	465f      	mov	r7, fp
    1778:	4656      	mov	r6, sl
    177a:	464d      	mov	r5, r9
    177c:	4644      	mov	r4, r8
    177e:	b4f0      	push	{r4, r5, r6, r7}
    1780:	1c0d      	adds	r5, r1, #0
    1782:	b085      	sub	sp, #20
    1784:	1c06      	adds	r6, r0, #0
    1786:	4692      	mov	sl, r2
    1788:	4698      	mov	r8, r3
    178a:	9002      	str	r0, [sp, #8]
    178c:	9101      	str	r1, [sp, #4]
    178e:	9203      	str	r2, [sp, #12]
    1790:	1c1f      	adds	r7, r3, #0
    1792:	1c14      	adds	r4, r2, #0
    1794:	4683      	mov	fp, r0
    1796:	46a9      	mov	r9, r5
    1798:	2b00      	cmp	r3, #0
    179a:	d152      	bne.n	1842 <__udivdi3+0xce>
    179c:	42aa      	cmp	r2, r5
    179e:	d96b      	bls.n	1878 <__udivdi3+0x104>
    17a0:	1c10      	adds	r0, r2, #0
    17a2:	f000 f9a7 	bl	1af4 <__clzsi2>
    17a6:	2800      	cmp	r0, #0
    17a8:	d00a      	beq.n	17c0 <__udivdi3+0x4c>
    17aa:	2320      	movs	r3, #32
    17ac:	1a1b      	subs	r3, r3, r0
    17ae:	1c31      	adds	r1, r6, #0
    17b0:	40d9      	lsrs	r1, r3
    17b2:	4085      	lsls	r5, r0
    17b4:	1c0b      	adds	r3, r1, #0
    17b6:	432b      	orrs	r3, r5
    17b8:	4086      	lsls	r6, r0
    17ba:	4084      	lsls	r4, r0
    17bc:	4699      	mov	r9, r3
    17be:	46b3      	mov	fp, r6
    17c0:	0c25      	lsrs	r5, r4, #16
    17c2:	0423      	lsls	r3, r4, #16
    17c4:	0c1b      	lsrs	r3, r3, #16
    17c6:	1c29      	adds	r1, r5, #0
    17c8:	4648      	mov	r0, r9
    17ca:	4698      	mov	r8, r3
    17cc:	f7ff fd32 	bl	1234 <__aeabi_uidiv>
    17d0:	4646      	mov	r6, r8
    17d2:	1c07      	adds	r7, r0, #0
    17d4:	4346      	muls	r6, r0
    17d6:	1c29      	adds	r1, r5, #0
    17d8:	4648      	mov	r0, r9
    17da:	f7ff fd6f 	bl	12bc <__aeabi_uidivmod>
    17de:	465a      	mov	r2, fp
    17e0:	0409      	lsls	r1, r1, #16
    17e2:	0c13      	lsrs	r3, r2, #16
    17e4:	4319      	orrs	r1, r3
    17e6:	428e      	cmp	r6, r1
    17e8:	d909      	bls.n	17fe <__udivdi3+0x8a>
    17ea:	1909      	adds	r1, r1, r4
    17ec:	1e7b      	subs	r3, r7, #1
    17ee:	428c      	cmp	r4, r1
    17f0:	d900      	bls.n	17f4 <__udivdi3+0x80>
    17f2:	e159      	b.n	1aa8 <__udivdi3+0x334>
    17f4:	428e      	cmp	r6, r1
    17f6:	d800      	bhi.n	17fa <__udivdi3+0x86>
    17f8:	e156      	b.n	1aa8 <__udivdi3+0x334>
    17fa:	3f02      	subs	r7, #2
    17fc:	1909      	adds	r1, r1, r4
    17fe:	1b89      	subs	r1, r1, r6
    1800:	4689      	mov	r9, r1
    1802:	1c08      	adds	r0, r1, #0
    1804:	1c29      	adds	r1, r5, #0
    1806:	f7ff fd15 	bl	1234 <__aeabi_uidiv>
    180a:	4643      	mov	r3, r8
    180c:	4343      	muls	r3, r0
    180e:	1c06      	adds	r6, r0, #0
    1810:	1c29      	adds	r1, r5, #0
    1812:	4648      	mov	r0, r9
    1814:	4698      	mov	r8, r3
    1816:	f7ff fd51 	bl	12bc <__aeabi_uidivmod>
    181a:	465a      	mov	r2, fp
    181c:	0413      	lsls	r3, r2, #16
    181e:	0409      	lsls	r1, r1, #16
    1820:	0c1b      	lsrs	r3, r3, #16
    1822:	4319      	orrs	r1, r3
    1824:	4588      	cmp	r8, r1
    1826:	d908      	bls.n	183a <__udivdi3+0xc6>
    1828:	1909      	adds	r1, r1, r4
    182a:	1e73      	subs	r3, r6, #1
    182c:	428c      	cmp	r4, r1
    182e:	d900      	bls.n	1832 <__udivdi3+0xbe>
    1830:	e138      	b.n	1aa4 <__udivdi3+0x330>
    1832:	3e02      	subs	r6, #2
    1834:	4588      	cmp	r8, r1
    1836:	d800      	bhi.n	183a <__udivdi3+0xc6>
    1838:	e134      	b.n	1aa4 <__udivdi3+0x330>
    183a:	0438      	lsls	r0, r7, #16
    183c:	4330      	orrs	r0, r6
    183e:	2700      	movs	r7, #0
    1840:	e012      	b.n	1868 <__udivdi3+0xf4>
    1842:	9a01      	ldr	r2, [sp, #4]
    1844:	4293      	cmp	r3, r2
    1846:	d80d      	bhi.n	1864 <__udivdi3+0xf0>
    1848:	1c18      	adds	r0, r3, #0
    184a:	f000 f953 	bl	1af4 <__clzsi2>
    184e:	1e04      	subs	r4, r0, #0
    1850:	d166      	bne.n	1920 <__udivdi3+0x1ac>
    1852:	9b01      	ldr	r3, [sp, #4]
    1854:	429f      	cmp	r7, r3
    1856:	d200      	bcs.n	185a <__udivdi3+0xe6>
    1858:	e121      	b.n	1a9e <__udivdi3+0x32a>
    185a:	9f03      	ldr	r7, [sp, #12]
    185c:	9902      	ldr	r1, [sp, #8]
    185e:	428f      	cmp	r7, r1
    1860:	d800      	bhi.n	1864 <__udivdi3+0xf0>
    1862:	e11c      	b.n	1a9e <__udivdi3+0x32a>
    1864:	2700      	movs	r7, #0
    1866:	2000      	movs	r0, #0
    1868:	1c39      	adds	r1, r7, #0
    186a:	b005      	add	sp, #20
    186c:	bc3c      	pop	{r2, r3, r4, r5}
    186e:	4690      	mov	r8, r2
    1870:	4699      	mov	r9, r3
    1872:	46a2      	mov	sl, r4
    1874:	46ab      	mov	fp, r5
    1876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1878:	2a00      	cmp	r2, #0
    187a:	d104      	bne.n	1886 <__udivdi3+0x112>
    187c:	2001      	movs	r0, #1
    187e:	2100      	movs	r1, #0
    1880:	f7ff fcd8 	bl	1234 <__aeabi_uidiv>
    1884:	1c04      	adds	r4, r0, #0
    1886:	1c20      	adds	r0, r4, #0
    1888:	f000 f934 	bl	1af4 <__clzsi2>
    188c:	2800      	cmp	r0, #0
    188e:	d000      	beq.n	1892 <__udivdi3+0x11e>
    1890:	e0b6      	b.n	1a00 <__udivdi3+0x28c>
    1892:	0423      	lsls	r3, r4, #16
    1894:	1b2d      	subs	r5, r5, r4
    1896:	0c1b      	lsrs	r3, r3, #16
    1898:	46a9      	mov	r9, r5
    189a:	0c26      	lsrs	r6, r4, #16
    189c:	4698      	mov	r8, r3
    189e:	2701      	movs	r7, #1
    18a0:	1c31      	adds	r1, r6, #0
    18a2:	4648      	mov	r0, r9
    18a4:	f7ff fcc6 	bl	1234 <__aeabi_uidiv>
    18a8:	4641      	mov	r1, r8
    18aa:	4341      	muls	r1, r0
    18ac:	1c05      	adds	r5, r0, #0
    18ae:	468a      	mov	sl, r1
    18b0:	4648      	mov	r0, r9
    18b2:	1c31      	adds	r1, r6, #0
    18b4:	f7ff fd02 	bl	12bc <__aeabi_uidivmod>
    18b8:	465a      	mov	r2, fp
    18ba:	0408      	lsls	r0, r1, #16
    18bc:	0c13      	lsrs	r3, r2, #16
    18be:	4318      	orrs	r0, r3
    18c0:	4582      	cmp	sl, r0
    18c2:	d907      	bls.n	18d4 <__udivdi3+0x160>
    18c4:	1900      	adds	r0, r0, r4
    18c6:	1e6b      	subs	r3, r5, #1
    18c8:	4284      	cmp	r4, r0
    18ca:	d802      	bhi.n	18d2 <__udivdi3+0x15e>
    18cc:	4582      	cmp	sl, r0
    18ce:	d900      	bls.n	18d2 <__udivdi3+0x15e>
    18d0:	e10d      	b.n	1aee <__udivdi3+0x37a>
    18d2:	1c1d      	adds	r5, r3, #0
    18d4:	4653      	mov	r3, sl
    18d6:	1ac3      	subs	r3, r0, r3
    18d8:	1c18      	adds	r0, r3, #0
    18da:	1c31      	adds	r1, r6, #0
    18dc:	469a      	mov	sl, r3
    18de:	f7ff fca9 	bl	1234 <__aeabi_uidiv>
    18e2:	4641      	mov	r1, r8
    18e4:	4341      	muls	r1, r0
    18e6:	4681      	mov	r9, r0
    18e8:	4688      	mov	r8, r1
    18ea:	4650      	mov	r0, sl
    18ec:	1c31      	adds	r1, r6, #0
    18ee:	f7ff fce5 	bl	12bc <__aeabi_uidivmod>
    18f2:	465a      	mov	r2, fp
    18f4:	0413      	lsls	r3, r2, #16
    18f6:	0409      	lsls	r1, r1, #16
    18f8:	0c1b      	lsrs	r3, r3, #16
    18fa:	4319      	orrs	r1, r3
    18fc:	4588      	cmp	r8, r1
    18fe:	d90b      	bls.n	1918 <__udivdi3+0x1a4>
    1900:	464b      	mov	r3, r9
    1902:	1909      	adds	r1, r1, r4
    1904:	3b01      	subs	r3, #1
    1906:	428c      	cmp	r4, r1
    1908:	d900      	bls.n	190c <__udivdi3+0x198>
    190a:	e0cf      	b.n	1aac <__udivdi3+0x338>
    190c:	4588      	cmp	r8, r1
    190e:	d800      	bhi.n	1912 <__udivdi3+0x19e>
    1910:	e0cc      	b.n	1aac <__udivdi3+0x338>
    1912:	2302      	movs	r3, #2
    1914:	425b      	negs	r3, r3
    1916:	4499      	add	r9, r3
    1918:	0428      	lsls	r0, r5, #16
    191a:	4649      	mov	r1, r9
    191c:	4308      	orrs	r0, r1
    191e:	e7a3      	b.n	1868 <__udivdi3+0xf4>
    1920:	2320      	movs	r3, #32
    1922:	1a1b      	subs	r3, r3, r0
    1924:	4642      	mov	r2, r8
    1926:	4657      	mov	r7, sl
    1928:	4082      	lsls	r2, r0
    192a:	40df      	lsrs	r7, r3
    192c:	4317      	orrs	r7, r2
    192e:	4652      	mov	r2, sl
    1930:	4082      	lsls	r2, r0
    1932:	9201      	str	r2, [sp, #4]
    1934:	1c32      	adds	r2, r6, #0
    1936:	40da      	lsrs	r2, r3
    1938:	1c29      	adds	r1, r5, #0
    193a:	40d9      	lsrs	r1, r3
    193c:	4085      	lsls	r5, r0
    193e:	1c13      	adds	r3, r2, #0
    1940:	432b      	orrs	r3, r5
    1942:	9302      	str	r3, [sp, #8]
    1944:	0c3d      	lsrs	r5, r7, #16
    1946:	043b      	lsls	r3, r7, #16
    1948:	0c1b      	lsrs	r3, r3, #16
    194a:	4688      	mov	r8, r1
    194c:	1c08      	adds	r0, r1, #0
    194e:	1c29      	adds	r1, r5, #0
    1950:	469a      	mov	sl, r3
    1952:	f7ff fc6f 	bl	1234 <__aeabi_uidiv>
    1956:	4653      	mov	r3, sl
    1958:	4343      	muls	r3, r0
    195a:	4681      	mov	r9, r0
    195c:	1c29      	adds	r1, r5, #0
    195e:	4640      	mov	r0, r8
    1960:	469b      	mov	fp, r3
    1962:	f7ff fcab 	bl	12bc <__aeabi_uidivmod>
    1966:	9a02      	ldr	r2, [sp, #8]
    1968:	0409      	lsls	r1, r1, #16
    196a:	0c13      	lsrs	r3, r2, #16
    196c:	4319      	orrs	r1, r3
    196e:	458b      	cmp	fp, r1
    1970:	d906      	bls.n	1980 <__udivdi3+0x20c>
    1972:	464b      	mov	r3, r9
    1974:	19c9      	adds	r1, r1, r7
    1976:	3b01      	subs	r3, #1
    1978:	428f      	cmp	r7, r1
    197a:	d800      	bhi.n	197e <__udivdi3+0x20a>
    197c:	e0ab      	b.n	1ad6 <__udivdi3+0x362>
    197e:	4699      	mov	r9, r3
    1980:	465a      	mov	r2, fp
    1982:	1a8a      	subs	r2, r1, r2
    1984:	1c10      	adds	r0, r2, #0
    1986:	1c29      	adds	r1, r5, #0
    1988:	4693      	mov	fp, r2
    198a:	f7ff fc53 	bl	1234 <__aeabi_uidiv>
    198e:	4653      	mov	r3, sl
    1990:	4343      	muls	r3, r0
    1992:	1c29      	adds	r1, r5, #0
    1994:	4680      	mov	r8, r0
    1996:	4658      	mov	r0, fp
    1998:	469a      	mov	sl, r3
    199a:	f7ff fc8f 	bl	12bc <__aeabi_uidivmod>
    199e:	9a02      	ldr	r2, [sp, #8]
    19a0:	0409      	lsls	r1, r1, #16
    19a2:	0415      	lsls	r5, r2, #16
    19a4:	0c2d      	lsrs	r5, r5, #16
    19a6:	4329      	orrs	r1, r5
    19a8:	458a      	cmp	sl, r1
    19aa:	d906      	bls.n	19ba <__udivdi3+0x246>
    19ac:	4643      	mov	r3, r8
    19ae:	19c9      	adds	r1, r1, r7
    19b0:	3b01      	subs	r3, #1
    19b2:	428f      	cmp	r7, r1
    19b4:	d800      	bhi.n	19b8 <__udivdi3+0x244>
    19b6:	e086      	b.n	1ac6 <__udivdi3+0x352>
    19b8:	4698      	mov	r8, r3
    19ba:	4657      	mov	r7, sl
    19bc:	1bcf      	subs	r7, r1, r7
    19be:	46ba      	mov	sl, r7
    19c0:	4649      	mov	r1, r9
    19c2:	9f01      	ldr	r7, [sp, #4]
    19c4:	0408      	lsls	r0, r1, #16
    19c6:	4642      	mov	r2, r8
    19c8:	4310      	orrs	r0, r2
    19ca:	043d      	lsls	r5, r7, #16
    19cc:	0c2d      	lsrs	r5, r5, #16
    19ce:	0403      	lsls	r3, r0, #16
    19d0:	0c3f      	lsrs	r7, r7, #16
    19d2:	0c1b      	lsrs	r3, r3, #16
    19d4:	0c02      	lsrs	r2, r0, #16
    19d6:	1c29      	adds	r1, r5, #0
    19d8:	4359      	muls	r1, r3
    19da:	4355      	muls	r5, r2
    19dc:	437b      	muls	r3, r7
    19de:	437a      	muls	r2, r7
    19e0:	18eb      	adds	r3, r5, r3
    19e2:	0c0f      	lsrs	r7, r1, #16
    19e4:	19db      	adds	r3, r3, r7
    19e6:	468c      	mov	ip, r1
    19e8:	429d      	cmp	r5, r3
    19ea:	d902      	bls.n	19f2 <__udivdi3+0x27e>
    19ec:	2780      	movs	r7, #128	; 0x80
    19ee:	027f      	lsls	r7, r7, #9
    19f0:	19d2      	adds	r2, r2, r7
    19f2:	0c1d      	lsrs	r5, r3, #16
    19f4:	1952      	adds	r2, r2, r5
    19f6:	4592      	cmp	sl, r2
    19f8:	d362      	bcc.n	1ac0 <__udivdi3+0x34c>
    19fa:	d059      	beq.n	1ab0 <__udivdi3+0x33c>
    19fc:	2700      	movs	r7, #0
    19fe:	e733      	b.n	1868 <__udivdi3+0xf4>
    1a00:	2320      	movs	r3, #32
    1a02:	1a1b      	subs	r3, r3, r0
    1a04:	1c31      	adds	r1, r6, #0
    1a06:	1c2f      	adds	r7, r5, #0
    1a08:	40d9      	lsrs	r1, r3
    1a0a:	40df      	lsrs	r7, r3
    1a0c:	4085      	lsls	r5, r0
    1a0e:	1c0b      	adds	r3, r1, #0
    1a10:	4084      	lsls	r4, r0
    1a12:	432b      	orrs	r3, r5
    1a14:	4086      	lsls	r6, r0
    1a16:	9301      	str	r3, [sp, #4]
    1a18:	46b3      	mov	fp, r6
    1a1a:	0423      	lsls	r3, r4, #16
    1a1c:	0c26      	lsrs	r6, r4, #16
    1a1e:	0c1b      	lsrs	r3, r3, #16
    1a20:	1c38      	adds	r0, r7, #0
    1a22:	1c31      	adds	r1, r6, #0
    1a24:	4698      	mov	r8, r3
    1a26:	f7ff fc05 	bl	1234 <__aeabi_uidiv>
    1a2a:	4642      	mov	r2, r8
    1a2c:	4342      	muls	r2, r0
    1a2e:	1c05      	adds	r5, r0, #0
    1a30:	1c31      	adds	r1, r6, #0
    1a32:	1c38      	adds	r0, r7, #0
    1a34:	4691      	mov	r9, r2
    1a36:	f7ff fc41 	bl	12bc <__aeabi_uidivmod>
    1a3a:	9f01      	ldr	r7, [sp, #4]
    1a3c:	0409      	lsls	r1, r1, #16
    1a3e:	0c3b      	lsrs	r3, r7, #16
    1a40:	4319      	orrs	r1, r3
    1a42:	4589      	cmp	r9, r1
    1a44:	d907      	bls.n	1a56 <__udivdi3+0x2e2>
    1a46:	1909      	adds	r1, r1, r4
    1a48:	1e6b      	subs	r3, r5, #1
    1a4a:	428c      	cmp	r4, r1
    1a4c:	d84d      	bhi.n	1aea <__udivdi3+0x376>
    1a4e:	4589      	cmp	r9, r1
    1a50:	d94b      	bls.n	1aea <__udivdi3+0x376>
    1a52:	3d02      	subs	r5, #2
    1a54:	1909      	adds	r1, r1, r4
    1a56:	464a      	mov	r2, r9
    1a58:	1a8a      	subs	r2, r1, r2
    1a5a:	1c10      	adds	r0, r2, #0
    1a5c:	1c31      	adds	r1, r6, #0
    1a5e:	4692      	mov	sl, r2
    1a60:	f7ff fbe8 	bl	1234 <__aeabi_uidiv>
    1a64:	4643      	mov	r3, r8
    1a66:	4343      	muls	r3, r0
    1a68:	1c07      	adds	r7, r0, #0
    1a6a:	1c31      	adds	r1, r6, #0
    1a6c:	4650      	mov	r0, sl
    1a6e:	4699      	mov	r9, r3
    1a70:	f7ff fc24 	bl	12bc <__aeabi_uidivmod>
    1a74:	9a01      	ldr	r2, [sp, #4]
    1a76:	0409      	lsls	r1, r1, #16
    1a78:	0413      	lsls	r3, r2, #16
    1a7a:	0c1b      	lsrs	r3, r3, #16
    1a7c:	4319      	orrs	r1, r3
    1a7e:	4589      	cmp	r9, r1
    1a80:	d907      	bls.n	1a92 <__udivdi3+0x31e>
    1a82:	1909      	adds	r1, r1, r4
    1a84:	1e7b      	subs	r3, r7, #1
    1a86:	428c      	cmp	r4, r1
    1a88:	d82d      	bhi.n	1ae6 <__udivdi3+0x372>
    1a8a:	4589      	cmp	r9, r1
    1a8c:	d92b      	bls.n	1ae6 <__udivdi3+0x372>
    1a8e:	3f02      	subs	r7, #2
    1a90:	1909      	adds	r1, r1, r4
    1a92:	464b      	mov	r3, r9
    1a94:	1acb      	subs	r3, r1, r3
    1a96:	042d      	lsls	r5, r5, #16
    1a98:	4699      	mov	r9, r3
    1a9a:	432f      	orrs	r7, r5
    1a9c:	e700      	b.n	18a0 <__udivdi3+0x12c>
    1a9e:	2700      	movs	r7, #0
    1aa0:	2001      	movs	r0, #1
    1aa2:	e6e1      	b.n	1868 <__udivdi3+0xf4>
    1aa4:	1c1e      	adds	r6, r3, #0
    1aa6:	e6c8      	b.n	183a <__udivdi3+0xc6>
    1aa8:	1c1f      	adds	r7, r3, #0
    1aaa:	e6a8      	b.n	17fe <__udivdi3+0x8a>
    1aac:	4699      	mov	r9, r3
    1aae:	e733      	b.n	1918 <__udivdi3+0x1a4>
    1ab0:	4661      	mov	r1, ip
    1ab2:	040a      	lsls	r2, r1, #16
    1ab4:	041b      	lsls	r3, r3, #16
    1ab6:	0c12      	lsrs	r2, r2, #16
    1ab8:	189b      	adds	r3, r3, r2
    1aba:	40a6      	lsls	r6, r4
    1abc:	429e      	cmp	r6, r3
    1abe:	d29d      	bcs.n	19fc <__udivdi3+0x288>
    1ac0:	3801      	subs	r0, #1
    1ac2:	2700      	movs	r7, #0
    1ac4:	e6d0      	b.n	1868 <__udivdi3+0xf4>
    1ac6:	458a      	cmp	sl, r1
    1ac8:	d800      	bhi.n	1acc <__udivdi3+0x358>
    1aca:	e775      	b.n	19b8 <__udivdi3+0x244>
    1acc:	2302      	movs	r3, #2
    1ace:	425b      	negs	r3, r3
    1ad0:	4498      	add	r8, r3
    1ad2:	19c9      	adds	r1, r1, r7
    1ad4:	e771      	b.n	19ba <__udivdi3+0x246>
    1ad6:	458b      	cmp	fp, r1
    1ad8:	d800      	bhi.n	1adc <__udivdi3+0x368>
    1ada:	e750      	b.n	197e <__udivdi3+0x20a>
    1adc:	2302      	movs	r3, #2
    1ade:	425b      	negs	r3, r3
    1ae0:	4499      	add	r9, r3
    1ae2:	19c9      	adds	r1, r1, r7
    1ae4:	e74c      	b.n	1980 <__udivdi3+0x20c>
    1ae6:	1c1f      	adds	r7, r3, #0
    1ae8:	e7d3      	b.n	1a92 <__udivdi3+0x31e>
    1aea:	1c1d      	adds	r5, r3, #0
    1aec:	e7b3      	b.n	1a56 <__udivdi3+0x2e2>
    1aee:	3d02      	subs	r5, #2
    1af0:	1900      	adds	r0, r0, r4
    1af2:	e6ef      	b.n	18d4 <__udivdi3+0x160>

00001af4 <__clzsi2>:
    1af4:	211c      	movs	r1, #28
    1af6:	2301      	movs	r3, #1
    1af8:	041b      	lsls	r3, r3, #16
    1afa:	4298      	cmp	r0, r3
    1afc:	d301      	bcc.n	1b02 <__clzsi2+0xe>
    1afe:	0c00      	lsrs	r0, r0, #16
    1b00:	3910      	subs	r1, #16
    1b02:	0a1b      	lsrs	r3, r3, #8
    1b04:	4298      	cmp	r0, r3
    1b06:	d301      	bcc.n	1b0c <__clzsi2+0x18>
    1b08:	0a00      	lsrs	r0, r0, #8
    1b0a:	3908      	subs	r1, #8
    1b0c:	091b      	lsrs	r3, r3, #4
    1b0e:	4298      	cmp	r0, r3
    1b10:	d301      	bcc.n	1b16 <__clzsi2+0x22>
    1b12:	0900      	lsrs	r0, r0, #4
    1b14:	3904      	subs	r1, #4
    1b16:	a202      	add	r2, pc, #8	; (adr r2, 1b20 <__clzsi2+0x2c>)
    1b18:	5c10      	ldrb	r0, [r2, r0]
    1b1a:	1840      	adds	r0, r0, r1
    1b1c:	4770      	bx	lr
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	02020304 	.word	0x02020304
    1b24:	01010101 	.word	0x01010101
	...

00001b30 <atexit>:
    1b30:	b508      	push	{r3, lr}
    1b32:	1c01      	adds	r1, r0, #0
    1b34:	2000      	movs	r0, #0
    1b36:	1c02      	adds	r2, r0, #0
    1b38:	1c03      	adds	r3, r0, #0
    1b3a:	f000 f845 	bl	1bc8 <__register_exitproc>
    1b3e:	bd08      	pop	{r3, pc}

00001b40 <__libc_fini_array>:
    1b40:	b538      	push	{r3, r4, r5, lr}
    1b42:	4b07      	ldr	r3, [pc, #28]	; (1b60 <__libc_fini_array+0x20>)
    1b44:	4c07      	ldr	r4, [pc, #28]	; (1b64 <__libc_fini_array+0x24>)
    1b46:	1c1d      	adds	r5, r3, #0
    1b48:	1ae4      	subs	r4, r4, r3
    1b4a:	10a4      	asrs	r4, r4, #2
    1b4c:	2c00      	cmp	r4, #0
    1b4e:	d004      	beq.n	1b5a <__libc_fini_array+0x1a>
    1b50:	3c01      	subs	r4, #1
    1b52:	00a3      	lsls	r3, r4, #2
    1b54:	58eb      	ldr	r3, [r5, r3]
    1b56:	4798      	blx	r3
    1b58:	e7f8      	b.n	1b4c <__libc_fini_array+0xc>
    1b5a:	f000 f8d5 	bl	1d08 <_fini>
    1b5e:	bd38      	pop	{r3, r4, r5, pc}
    1b60:	00001d14 	.word	0x00001d14
    1b64:	00001d18 	.word	0x00001d18

00001b68 <__libc_init_array>:
    1b68:	b570      	push	{r4, r5, r6, lr}
    1b6a:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <__libc_init_array+0x3c>)
    1b6c:	4d0e      	ldr	r5, [pc, #56]	; (1ba8 <__libc_init_array+0x40>)
    1b6e:	2400      	movs	r4, #0
    1b70:	1aed      	subs	r5, r5, r3
    1b72:	10ad      	asrs	r5, r5, #2
    1b74:	1c1e      	adds	r6, r3, #0
    1b76:	42ac      	cmp	r4, r5
    1b78:	d004      	beq.n	1b84 <__libc_init_array+0x1c>
    1b7a:	00a3      	lsls	r3, r4, #2
    1b7c:	58f3      	ldr	r3, [r6, r3]
    1b7e:	4798      	blx	r3
    1b80:	3401      	adds	r4, #1
    1b82:	e7f8      	b.n	1b76 <__libc_init_array+0xe>
    1b84:	f000 f8b6 	bl	1cf4 <_init>
    1b88:	4b08      	ldr	r3, [pc, #32]	; (1bac <__libc_init_array+0x44>)
    1b8a:	4d09      	ldr	r5, [pc, #36]	; (1bb0 <__libc_init_array+0x48>)
    1b8c:	2400      	movs	r4, #0
    1b8e:	1aed      	subs	r5, r5, r3
    1b90:	10ad      	asrs	r5, r5, #2
    1b92:	1c1e      	adds	r6, r3, #0
    1b94:	42ac      	cmp	r4, r5
    1b96:	d004      	beq.n	1ba2 <__libc_init_array+0x3a>
    1b98:	00a3      	lsls	r3, r4, #2
    1b9a:	58f3      	ldr	r3, [r6, r3]
    1b9c:	4798      	blx	r3
    1b9e:	3401      	adds	r4, #1
    1ba0:	e7f8      	b.n	1b94 <__libc_init_array+0x2c>
    1ba2:	bd70      	pop	{r4, r5, r6, pc}
    1ba4:	00001d00 	.word	0x00001d00
    1ba8:	00001d00 	.word	0x00001d00
    1bac:	00001d00 	.word	0x00001d00
    1bb0:	00001d08 	.word	0x00001d08

00001bb4 <memcpy>:
    1bb4:	b510      	push	{r4, lr}
    1bb6:	2300      	movs	r3, #0
    1bb8:	4293      	cmp	r3, r2
    1bba:	d003      	beq.n	1bc4 <memcpy+0x10>
    1bbc:	5ccc      	ldrb	r4, [r1, r3]
    1bbe:	54c4      	strb	r4, [r0, r3]
    1bc0:	3301      	adds	r3, #1
    1bc2:	e7f9      	b.n	1bb8 <memcpy+0x4>
    1bc4:	bd10      	pop	{r4, pc}
	...

00001bc8 <__register_exitproc>:
    1bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bca:	1c1e      	adds	r6, r3, #0
    1bcc:	4b23      	ldr	r3, [pc, #140]	; (1c5c <__register_exitproc+0x94>)
    1bce:	1c05      	adds	r5, r0, #0
    1bd0:	681b      	ldr	r3, [r3, #0]
    1bd2:	9101      	str	r1, [sp, #4]
    1bd4:	1c1c      	adds	r4, r3, #0
    1bd6:	34fc      	adds	r4, #252	; 0xfc
    1bd8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1bda:	1c17      	adds	r7, r2, #0
    1bdc:	2800      	cmp	r0, #0
    1bde:	d103      	bne.n	1be8 <__register_exitproc+0x20>
    1be0:	22a6      	movs	r2, #166	; 0xa6
    1be2:	0052      	lsls	r2, r2, #1
    1be4:	1898      	adds	r0, r3, r2
    1be6:	64e0      	str	r0, [r4, #76]	; 0x4c
    1be8:	6843      	ldr	r3, [r0, #4]
    1bea:	2b1f      	cmp	r3, #31
    1bec:	dd16      	ble.n	1c1c <__register_exitproc+0x54>
    1bee:	4b1c      	ldr	r3, [pc, #112]	; (1c60 <__register_exitproc+0x98>)
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d102      	bne.n	1bfa <__register_exitproc+0x32>
    1bf4:	2001      	movs	r0, #1
    1bf6:	4240      	negs	r0, r0
    1bf8:	e02e      	b.n	1c58 <__register_exitproc+0x90>
    1bfa:	20c8      	movs	r0, #200	; 0xc8
    1bfc:	0040      	lsls	r0, r0, #1
    1bfe:	e000      	b.n	1c02 <__register_exitproc+0x3a>
    1c00:	bf00      	nop
    1c02:	2800      	cmp	r0, #0
    1c04:	d0f6      	beq.n	1bf4 <__register_exitproc+0x2c>
    1c06:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    1c08:	2300      	movs	r3, #0
    1c0a:	6002      	str	r2, [r0, #0]
    1c0c:	22c4      	movs	r2, #196	; 0xc4
    1c0e:	0052      	lsls	r2, r2, #1
    1c10:	6043      	str	r3, [r0, #4]
    1c12:	64e0      	str	r0, [r4, #76]	; 0x4c
    1c14:	5083      	str	r3, [r0, r2]
    1c16:	22c6      	movs	r2, #198	; 0xc6
    1c18:	0052      	lsls	r2, r2, #1
    1c1a:	5083      	str	r3, [r0, r2]
    1c1c:	6843      	ldr	r3, [r0, #4]
    1c1e:	2d00      	cmp	r5, #0
    1c20:	d013      	beq.n	1c4a <__register_exitproc+0x82>
    1c22:	009c      	lsls	r4, r3, #2
    1c24:	1904      	adds	r4, r0, r4
    1c26:	1c22      	adds	r2, r4, #0
    1c28:	3288      	adds	r2, #136	; 0x88
    1c2a:	6017      	str	r7, [r2, #0]
    1c2c:	27c2      	movs	r7, #194	; 0xc2
    1c2e:	007f      	lsls	r7, r7, #1
    1c30:	19c2      	adds	r2, r0, r7
    1c32:	6857      	ldr	r7, [r2, #4]
    1c34:	2101      	movs	r1, #1
    1c36:	4099      	lsls	r1, r3
    1c38:	430f      	orrs	r7, r1
    1c3a:	34fc      	adds	r4, #252	; 0xfc
    1c3c:	6057      	str	r7, [r2, #4]
    1c3e:	60e6      	str	r6, [r4, #12]
    1c40:	2d02      	cmp	r5, #2
    1c42:	d102      	bne.n	1c4a <__register_exitproc+0x82>
    1c44:	6894      	ldr	r4, [r2, #8]
    1c46:	4321      	orrs	r1, r4
    1c48:	6091      	str	r1, [r2, #8]
    1c4a:	1c5a      	adds	r2, r3, #1
    1c4c:	9f01      	ldr	r7, [sp, #4]
    1c4e:	3302      	adds	r3, #2
    1c50:	009b      	lsls	r3, r3, #2
    1c52:	6042      	str	r2, [r0, #4]
    1c54:	501f      	str	r7, [r3, r0]
    1c56:	2000      	movs	r0, #0
    1c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001cec 	.word	0x00001cec
    1c60:	00000000 	.word	0x00000000

00001c64 <register_fini>:
    1c64:	b508      	push	{r3, lr}
    1c66:	4b03      	ldr	r3, [pc, #12]	; (1c74 <register_fini+0x10>)
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d002      	beq.n	1c72 <register_fini+0xe>
    1c6c:	4802      	ldr	r0, [pc, #8]	; (1c78 <register_fini+0x14>)
    1c6e:	f7ff ff5f 	bl	1b30 <atexit>
    1c72:	bd08      	pop	{r3, pc}
    1c74:	00000000 	.word	0x00000000
    1c78:	00001b41 	.word	0x00001b41
    1c7c:	42000800 	.word	0x42000800
    1c80:	42000c00 	.word	0x42000c00
    1c84:	42001000 	.word	0x42001000
    1c88:	42001400 	.word	0x42001400
    1c8c:	42001800 	.word	0x42001800
    1c90:	42001c00 	.word	0x42001c00
    1c94:	0a090807 	.word	0x0a090807
    1c98:	00000c0b 	.word	0x00000c0b
    1c9c:	00000acc 	.word	0x00000acc
    1ca0:	00000b16 	.word	0x00000b16
    1ca4:	00000b16 	.word	0x00000b16
    1ca8:	00000ac6 	.word	0x00000ac6
    1cac:	00000ac6 	.word	0x00000ac6
    1cb0:	00000ae2 	.word	0x00000ae2
    1cb4:	00000ad2 	.word	0x00000ad2
    1cb8:	00000ae8 	.word	0x00000ae8
    1cbc:	00000ba0 	.word	0x00000ba0
    1cc0:	00000bf4 	.word	0x00000bf4
    1cc4:	00000bf4 	.word	0x00000bf4
    1cc8:	00000b80 	.word	0x00000b80
    1ccc:	00000b92 	.word	0x00000b92
    1cd0:	00000bb0 	.word	0x00000bb0
    1cd4:	00000b84 	.word	0x00000b84
    1cd8:	00000bc0 	.word	0x00000bc0
    1cdc:	6c6c6548 	.word	0x6c6c6548
    1ce0:	6f57206f 	.word	0x6f57206f
    1ce4:	21646c72 	.word	0x21646c72
    1ce8:	00000a0d 	.word	0x00000a0d

00001cec <_global_impure_ptr>:
    1cec:	20000010 00000043                       ... C...

00001cf4 <_init>:
    1cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1cfa:	bc08      	pop	{r3}
    1cfc:	469e      	mov	lr, r3
    1cfe:	4770      	bx	lr

00001d00 <__init_array_start>:
    1d00:	00001c65 	.word	0x00001c65

00001d04 <__frame_dummy_init_array_entry>:
    1d04:	00000125                                %...

00001d08 <_fini>:
    1d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d0e:	bc08      	pop	{r3}
    1d10:	469e      	mov	lr, r3
    1d12:	4770      	bx	lr

00001d14 <__fini_array_start>:
    1d14:	000000f9 	.word	0x000000f9
